{
    "organization": {
        "name": "polimix",
        "displayName": "polimiX"
    },
    "course": {
        "name": "introduzione-ad-octave",
        "number": "80169",
        "year": "2016",
        "season": "fall",
        "start": "2016 10 01",
        "end": "2017 06 01",
        "course_image": "intro.png",
        "real_course_image": "/Users/zaccaria/development/github/gitbook-octave/assets/intro.png",
        "urlName": "2016-fall",
        "displayName": "Introduzione ad Octave"
    },
    "xqueue": {
        "name": "octave"
    },
    "grading": {
        "GRADE_CUTOFFS": {
            "pass": 0.6
        },
        "GRADER": [
            {
                "min_count": 2,
                "weight": 1,
                "type": "Homework",
                "drop_count": 0,
                "short_label": "HW"
            },
            {
                "min_count": 3,
                "weight": 1,
                "type": "Lab",
                "drop_count": 0,
                "short_label": "Lab"
            }
        ]
    },
    "info": {
        "about": "Questo corso introduce gli studenti ai rudimenti di programmazione\nOctave/Matlab.\n",
        "prerequisites": "È richiesta una minima conoscenza degli strumenti informatici.\n",
        "course-staff": [
            {
                "name": "Vittorio Zaccaria",
                "image": "https://dl.dropboxusercontent.com/u/5867765/avatars/avatar-vz.jpg",
                "bio": "Laurea in Ingegneria Informatica (1998) e Dottorato in Ingegneria Informatica (2002)"
            }
        ],
        "faq": [
            {
                "question": "Possono partecipare tutti al corso?",
                "answer": "Si, tutti gli iscritti a Informatica B possono partecipare"
            }
        ]
    },
    "short-description": "Benvenuti! Questo corso online è da intendersi come\nsupporto alla parte Matlab/Octave del corso di Informatica B che\ninsegno il Politecnico di Milano. Per ulteriori informazioni, fare\nriferimento alla pagina del corso.\n",
    "chapters": [
        {
            "name": "Le basi",
            "sequentials": [
                {
                    "name": "Le basi",
                    "scheduledWeek": 1,
                    "file": "basics/README.md",
                    "start": "2016 10 08",
                    "graded": false,
                    "displayName": "Le basi",
                    "urlName": "le-basi-owynqgn5",
                    "verticals": [
                        {
                            "content": "<h1>Le basi della programmazione</h1>\n<p>In questo primo capitolo impareremo le basi della programmazione in\nOctave.</p>\n<p>Programmare significa scrivere; proprio come un libro &#xE8; fatto da\ncapitoli, paragrafi, frasi, parole e lettere, in maniera simile un\nprogramma pu&#xF2; essere spezzato in componenti sempre pi&#xF9; piccole.</p>\n<p>Per il momento la pi&#xF9; importante componente che guarderemo &#xE8; lo\n<strong>statement</strong>. Uno <strong>statement</strong> &#xE8; analogo ad una frase in un libro. Da\nsolo infatti uno statement non ha tanto significato; &#xE8; solo all&#x27;interno\ndi un contesto che assume un rilievo importante.</p>\n<p>Lo statement &#xE8; anche comunemente conosciuto come <strong>linea di codice</strong>;\nquesto &#xE8; perch&#xE9; gli statement tendono a essere scritti in sequenza su\nlinee individuali all&#x27;interno di un file testuale (chiamato <strong>codice\nsorgente</strong>, o programma).</p>\n<p>Una linea di codice &#xE8; quindi una linea del tuo programma.</p>\n<p>Ecco il primo esempio di programma Octave che andremo ad esaminare (solo\ndue righe di codice!):</p>\n<pre><code class=\"language-matlab\">1+1\n2+2\n</code></pre>\n<p>Questo programma deve essere letto dall&#x27;interprete Octave che esegue,\nlinea per linea, le istruzioni che gli abbiamo dato. Abbiamo due\nmodalit&#xE0; per far questo:</p>\n<ol>\n<li>\n<p>Invocare l&#x27;interprete (le modalit&#xE0; cambiano a seconda del sistema\nche state utilizzando, e.g. Windows, Linux, OSX) e digitare\ninterattivamente il programma:</p>\n<pre><code class=\"language-matlab\">octave:1&#x3E; 1+1 &#xAB;INVIO&#xBB;\nans =  2\noctave:2&#x3E; 2+2 &#xAB;INVIO&#xBB;\nans =  4\noctave:3&#x3E;\n</code></pre>\n</li>\n<li>\n<p>Scrivere le istruzioni in un file di testo (ad. es., <code>esempio.m</code>) ed\neseguirlo con l&#x27;interprete (anche qui le modalit&#xE0; cambiano a seconda\ndel sistema che state utilizzando). Otterrete in uscita la stampa a\nvideo seguente:</p>\n<pre><code class=\"language-matlab\">ans =  2\nans =  4\n</code></pre>\n</li>\n</ol>\n<p>In questo corso preferiamo usare la seconda modalit&#xE0; (anche per gli\nesercizi che dovrete risolvere), ma in alcuni casi faremo riferimento\nanche alla prima.</p>\n",
                            "type": "normal",
                            "urlName": "le-basi-nwqb238j"
                        }
                    ]
                },
                {
                    "name": "Commenti",
                    "scheduledWeek": 1,
                    "file": "basics/comments.md",
                    "start": "2016 10 08",
                    "graded": false,
                    "displayName": "Commenti",
                    "urlName": "commenti-tkwelp3m",
                    "verticals": [
                        {
                            "content": "<h1>Commenti</h1>\n<p>I commenti sono linee di codice che vengono ignorate dall&#x27;interprete. Di\nfatto sono costituite da testo che non viene interpretato ma serve solo\nal programmatore per ricordarsi ci&#xF2; che aveva scritto!</p>\n<p>In Octave i commenti vengono marcati con il simbolo percentuale:</p>\n<pre><code class=\"language-matlab\">% Questo &#xE8; un commento\n1+1\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "commenti-t6i9g0e7"
                        },
                        {
                            "content": "<p>Esercizio: marcami come commento</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "Marcami come commento\n3+3",
                                "solution": "% Marcami come commento\n3+3",
                                "validation": "assert(true);",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoiTWFyY2FtaSBjb21lIGNvbW1lbnRvXG4zKzMiLCJzb2x1dGlvbiI6IiUgTWFyY2FtaSBjb21lIGNvbW1lbnRvXG4zKzMiLCJ2YWxpZGF0aW9uIjoiYXNzZXJ0KHRydWUpOyIsImNvbnRleHQiOiIiLCJsYW5nIjoibWF0bGFiIn0\"}",
                            "urlName": "commenti-6wcewg3l"
                        }
                    ]
                },
                {
                    "name": "Variabili",
                    "scheduledWeek": 1,
                    "file": "basics/variables.md",
                    "gradeAs": "HW",
                    "start": "2016 10 08",
                    "format": "HW",
                    "graded": true,
                    "displayName": "Variabili",
                    "urlName": "variabili-4akpp1xr",
                    "verticals": [
                        {
                            "content": "<h1>Variabili</h1>\n<p>Il primo passo per poter comprendere realmente la programmazione &#xE8;\nconsiderare l&#x27;analogia con l&#x27;algebra che studiavi a scuola. L&#x27;algebra\ndescrive delle espressioni:</p>\n<pre><code>3 + 5 = 8\n</code></pre>\n<p>Se ti ricordi, le espressioni potevano contenere incognite, per esempio\n<code>x</code>:</p>\n<pre><code>3 + x = 8\n</code></pre>\n<p>Potevi determinare il valore della variabile <code>x</code> spostando i termini\nintorno all&#x27;equazione:</p>\n<pre><code>x = 8 - 3\n-&#x3E; x = 5\n</code></pre>\n<p><code>x</code> &#xE8; di fatto un contenitore che contiene il valore 5.</p>\n<h2>Cosa &#xE8; effettivamente una variabile</h2>\n<p>Proprio come nell&#x27;algebra, le variabili di cui si parla in informatica\nsono <strong>contenitori</strong> per valori.</p>\n<p>Questi contenitori sono posti nella memoria del calcolatore. In\ngenerale, potete modificare il contenuto di tali contenitori diverse\nvolte durante l&#x27;esecuzione del vostro programma; l&#x27;unica cosa importante\nda ricordare &#xE8; che quando il calcolatore viene spento, le variabili\nperdono il loro valore.</p>\n<p>Le variabili hanno un <strong>nome</strong> ed un <strong>valore</strong>; i nomi possono essere\nqualsiasi lettera o parola ma ricorda che ci sono delle restrizioni che\nvariano da linguaggio e linguaggio.</p>\n<h2>Come definire una variabile in Octave</h2>\n<p>Quest programma Octave mostra come assegnare un valore ai contenitori\n<code>x</code> ed <code>y</code>, calcolarne la somma ed inserirla nel contenitore <code>result</code>:</p>\n<pre><code class=\"language-matlab\">x = 5;\ny = 6;\nresult = x + y;\n</code></pre>\n<p>Nota bene: il valore corrente di una variabile &#xE8; sempre l&#x27;ultimo che le\n&#xE8; stato assegnato:</p>\n<p>Supponete di avere il seguente programma:</p>\n",
                            "type": "normal",
                            "urlName": "variabili-x8c4ekns"
                        },
                        {
                            "content": "<ul>\n<li><code>x = 1;</code></li>\n<li><code>x = 3;</code></li>\n<li><code>y = 6;</code></li>\n<li><code>result = x + y;</code></li>\n</ul>\n<p>Quale sar&#xE0; il valore finale di <code>result</code>?</p>\n",
                            "type": "quiz",
                            "choices": [
                                "7",
                                "Indeterminato",
                                "9"
                            ],
                            "solutions": [
                                "9"
                            ],
                            "feedback": "result = 3 + 6",
                            "items": [
                                {
                                    "text": "7",
                                    "correct": false
                                },
                                {
                                    "text": "Indeterminato",
                                    "correct": false
                                },
                                {
                                    "text": "9",
                                    "correct": true
                                }
                            ],
                            "urlName": "variabili-er34qxv7",
                            "gradeAs": "HW"
                        }
                    ]
                },
                {
                    "name": "Stampa",
                    "scheduledWeek": 1,
                    "file": "basics/print.md",
                    "start": "2016 10 08",
                    "graded": false,
                    "displayName": "Stampa",
                    "urlName": "stampa-jtf9s19t",
                    "verticals": [
                        {
                            "content": "<h1>Stampa a video</h1>\n<p>Le stringhe, cos&#xED; come ogni altra variabile Octave possono essere\nstampate a video durante l&#x27;esecuzione del programma.</p>\n<p>Ogni qual volta assegnate un valore ad una variabile, senza terminare il\ncomando con un punto e virgola (<code>;</code>), questo provoca la visualizzazione\ndel risultato direttamente a video.</p>\n<p>Se apriamo l&#x27;interprete Octave e digitiamo (&#xAB;INVIO&#xBB; significa\nschiacciare il tasto invio):</p>\n<pre><code class=\"language-matlab\">octave&#x3E; x = 10 &#xAB;INVIO&#xBB;\n</code></pre>\n<p>otterremo:</p>\n<pre><code class=\"language-matlab\">x = 10\n</code></pre>\n<p>Se invece usiamo il <code>;</code>:</p>\n<pre><code class=\"language-matlab\">octave&#x3E; y = 11; &#xAB;INVIO&#xBB;\n</code></pre>\n<p>non verr&#xE0; stampato nulla.</p>\n<h2>La funzione <code>disp</code></h2>\n<p>Ricordarsi di mettere o non mettere i punti e virgola puo&#x27; diventare\nnoioso. In pi&#xF9;, come faremo pi&#xF9; avanti nel corso, non ci &#xE8; permessa\nmolta libert&#xE0; nel decidere cosa stampare.</p>\n<p>Abbiamo quindi bisogno di un modo pi&#xF9; esplicito per stampare le\nvariabili. A questo serve la funzione <code>disp</code>; vediamo un esempio:</p>\n<pre><code class=\"language-matlab\">x = 100\ndisp(&#x27;Il valore di x: &#x27;)\ndisp(x)\n</code></pre>\n<p>Se eseguite il codice sopra in octave otterrete</p>\n<pre><code>Il valore di x:\n100\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "stampa-ft8350t0"
                        }
                    ]
                },
                {
                    "name": "Tipi",
                    "scheduledWeek": 1,
                    "file": "basics/types.md",
                    "start": "2016 10 08",
                    "graded": false,
                    "displayName": "Tipi",
                    "urlName": "tipi-uc6udicx",
                    "verticals": [
                        {
                            "content": "<h1>Tipi</h1>\n<p>I computer sono sofisticati e possono fare uso di variabili pi&#xF9;\ncomplesse di semplici numeri, ovvero possono essere di <strong>tipi</strong>\ndifferenti. I tipi pi&#xF9; comuni sono:</p>\n<ul>\n<li>\n<p><strong>Numeri</strong></p>\n<ul>\n<li><strong>Float (virgola mobile)</strong>: 1.21323, 4, -33.5, 100004 oppure\n0.123</li>\n<li><strong>Integer (interi)</strong>: 1, 12, -33, 140 ma non 1.233</li>\n</ul>\n</li>\n<li>\n<p><strong>Stringhe</strong>: come &#x22;elefante&#x22;, &#x22;acqua&#x22;, oppure &#x22;caspita sei alto!&#x22;</p>\n</li>\n<li>\n<p><strong>Booleani</strong>: possono essere <strong>1</strong> (vero) o <strong>0</strong> (falso) ma non di\npi&#xF9;. Vedremo che tutti gli operatori di confronto ritornano\n<em>booleani</em>.</p>\n</li>\n<li>\n<p><strong>Array</strong>: una sequenza di numeri 1,2,3,4,... o altri tipi</p>\n</li>\n<li>\n<p><strong>Strutture dati</strong>: rappresentano un oggetto complessi</p>\n</li>\n</ul>\n<p>In Octave non devi esplicitamente dichiarare il tipo di una variabile.\nDevi semplicemente specificare durante l&#x27;assegnamento qual &#xE8; il valore\nche variabile deve avere; l&#x27;interprete decider&#xE0; automaticamente che tipo\nassegnare quella variabile.</p>\n",
                            "type": "normal",
                            "urlName": "tipi-w3eej7om"
                        },
                        {
                            "content": "<p>Fare in modo che ad <code>a</code> venga assegnato un intero</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "a=",
                                "solution": "a=1;",
                                "validation": "isInteger(a)",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoiYT0iLCJzb2x1dGlvbiI6ImE9MTsiLCJ2YWxpZGF0aW9uIjoiaXNJbnRlZ2VyKGEpIiwiY29udGV4dCI6IiIsImxhbmciOiJtYXRsYWIifQ\"}",
                            "urlName": "tipi-tyegmgab"
                        }
                    ]
                },
                {
                    "name": "Uguaglianza",
                    "scheduledWeek": 1,
                    "file": "basics/equality.md",
                    "gradeAs": "Lab",
                    "start": "2016 10 08",
                    "format": "Lab",
                    "graded": true,
                    "displayName": "Uguaglianza",
                    "urlName": "uguaglianza-vcg8snia",
                    "verticals": [
                        {
                            "content": "<h1>Test di uguaglianza</h1>\n<p>I programmatori devono frequentemente determinare se due variabili sono\nuguali oppure no. Questo viene fatto attraverso un operatore di\nuguaglianza.</p>\n<p>L&#x27;operatore per determinare l&#x27;uguaglianza di variabili &#xE8; <code>==</code>\n(uguale-uguale). Il valore risultante pu&#xF2; essere <code>1</code> (<strong>vero</strong>) o <code>0</code>\n(<strong>falso</strong>) e, a sua volta, pu&#xF2; essere inserito in un&#x27;altra variabile:</p>\n<pre><code class=\"language-matlab\">a = 1\nb = 1\nc = (a == b)\n</code></pre>\n<p>In questo caso il valore finale della variabile C &#xE8; uguale a <code>1</code>.</p>\n<h2>Altri operatori relazionali</h2>\n<p>L&#x27;operatore <code>==</code> fa parte dell&#x27;insieme pi&#xF9; ampio di <strong>operatori\nrelazionali</strong>, ovvero operatori che permettono di stabilire che\nrelazione hanno due numeri:</p>\n<table>\n<thead>\n<tr>\n<th>Operatore</th>\n<th>Significato</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#x3C;</code></td>\n<td>Minore di.</td>\n</tr>\n<tr>\n<td><code>&#x3C;=</code></td>\n<td>Minore di o uguale a.</td>\n</tr>\n<tr>\n<td><code>&#x3E;</code></td>\n<td>Maggiore di.</td>\n</tr>\n<tr>\n<td><code>&#x3E;=</code></td>\n<td>Maggiori di o uguale a.</td>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td>Uguale a.</td>\n</tr>\n<tr>\n<td><code>~=</code></td>\n<td>Diverso da.</td>\n</tr>\n</tbody>\n</table>\n<p>Ad esempio, l&#x27;operatore <code>&#x3C;=</code> (minore uguale) &#xE8; tale che il seguente\ncodice:</p>\n<pre><code class=\"language-matlab\">a = 3\nb = 6\nc = (a &#x3C;= b)\n</code></pre>\n<p>assegni a <code>c</code> il valore 1.</p>\n",
                            "type": "normal",
                            "urlName": "uguaglianza-qpiepnyg"
                        },
                        {
                            "content": "<p>Esercizio: Se avessimo usato l&#x27;espressione <code>c = (a ~= b)</code>, quale sarebbe\nstato il valore finale di <code>c</code>?</p>\n",
                            "type": "quiz",
                            "choices": [
                                "0",
                                "1",
                                "-1"
                            ],
                            "solutions": [
                                "1"
                            ],
                            "feedback": "L'operatore `~=` assegna a `c` il valore 1 solo se `a` e `b` sono diversi.",
                            "items": [
                                {
                                    "text": "0",
                                    "correct": false
                                },
                                {
                                    "text": "1",
                                    "correct": true
                                },
                                {
                                    "text": "-1",
                                    "correct": false
                                }
                            ],
                            "urlName": "uguaglianza-hkqqm7rq",
                            "gradeAs": "Lab"
                        }
                    ]
                }
            ],
            "start": "2016 10 08",
            "displayName": "Le basi",
            "urlName": "le-basi-tmsfdnw6"
        },
        {
            "name": "Numeri",
            "sequentials": [
                {
                    "name": "Numeri",
                    "scheduledWeek": 2,
                    "file": "numbers/README.md",
                    "start": "2016 10 15",
                    "graded": false,
                    "displayName": "Numeri",
                    "urlName": "numeri-y9tg1lui",
                    "verticals": [
                        {
                            "content": "<h1>Numeri</h1>\n<p>Octave usa la notazione decimale convenzionale, con un punto per\nseparare la parte intera da quella decimale, ad esempio:</p>\n<pre><code>2, 1.23, &#x2212;324.758\n</code></pre>\n<p>&#xC8; possibile usare anche la notazione <em>scientifica</em> o <em>esponenziale</em> (con\nmantissa ed esponente); ovvero, per specificare una potenza di 10 si\nutilizza la lettera <code>e</code>, ad esempio <code>&#x2212;3 &#xD7; 10^8</code> lo si rappresenta come\n<code>-3e8</code>.</p>\n<h2>Dettagli implementativi</h2>\n<p>Ciascun numero &#xE8; memorizzato in un campo da 64 bit (bit = <strong>binary\ndigit</strong>, unit&#xE0; di informazione elementare).</p>\n<p>Ci&#xF2; corrisponde, in base 10, a circa 16 cifre dopo la virgola. Ad\nesempio il numero <code>1.2345678901234567890</code> verr&#xE0; memorizzato come\n<code>1.2345678901234566</code>.</p>\n",
                            "type": "normal",
                            "urlName": "numeri-ib5sjcwc"
                        }
                    ]
                },
                {
                    "name": "Creazione",
                    "file": "numbers/create.md",
                    "gradeAs": "Lab",
                    "format": "Lab",
                    "graded": true,
                    "displayName": "Creazione",
                    "urlName": "creazione-xiks76fh",
                    "verticals": [
                        {
                            "content": "<h1>Creazione e copia</h1>\n<p>Come hai visto nei capitoli precedenti, puoi creare una variabile\nsemplicemente assegnandole un numero:</p>\n<pre><code class=\"language-matlab\">a = 3\n</code></pre>\n<p>Puoi creare una variabile anche assegnandole il valore di un&#x27;altra\nvariabile come ad esempio:</p>\n<pre><code class=\"language-matlab\">a = 3\nb = a\n</code></pre>\n<p>nell&#x27;esempio precedente la variabile <code>b</code> assume il valore della\nvariabile <code>a</code>, ovvero il valore tre.</p>\n<p>Attenzione: le variabili sono scollegate. Se successivamente assegnamo\nad <code>a</code> un altro valore:</p>\n<pre><code class=\"language-matlab\">a = 5\nb = a\na = 4\n</code></pre>\n<p>la variabile <code>b</code> continuer&#xE0; ad aver valore 3.</p>\n",
                            "type": "normal",
                            "urlName": "creazione-s9ndo72b"
                        },
                        {
                            "content": "<p>Quale valore ha la variabile <code>b</code> dopo questa sequenza di assegnamenti?</p>\n<ul>\n<li><code>a = 5</code></li>\n<li><code>b = a</code></li>\n<li><code>a = 4</code></li>\n</ul>\n",
                            "type": "quiz",
                            "choices": [
                                "5",
                                "4",
                                "NA"
                            ],
                            "solutions": [
                                "5"
                            ],
                            "feedback": "Dopo che `b` assume il valore tre, non viene più modificata.",
                            "items": [
                                {
                                    "text": "5",
                                    "correct": true
                                },
                                {
                                    "text": "4",
                                    "correct": false
                                },
                                {
                                    "text": "NA",
                                    "correct": false
                                }
                            ],
                            "urlName": "creazione-hlcmnhq1",
                            "gradeAs": "Lab"
                        }
                    ]
                },
                {
                    "name": "Operatori di base",
                    "file": "numbers/operators.md",
                    "graded": false,
                    "displayName": "Operatori di base",
                    "urlName": "operatori-di-base-ev5l03te",
                    "verticals": [
                        {
                            "content": "<h1>Operatori</h1>\n<p>Possiamo applicare operazioni matematiche ai numeri utilizzando\noperatori base come:</p>\n<ul>\n<li><strong>Addizione</strong>: <code>c = a + b</code></li>\n<li><strong>Sottrazione</strong>: <code>c = a - b</code></li>\n<li><strong>Moltiplicazione</strong>: <code>c = a * b</code></li>\n<li><strong>Divisione</strong>: <code>c = a / b</code></li>\n</ul>\n<p>Possiamo utilizzare le parentesi proprio come in matematica per forzare\nl&#x27;ordine di esecuzione delle operazioni stesse:</p>\n<pre><code class=\"language-matlab\">c = 3/(1+2)\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "operatori-di-base-ogfrlkq7"
                        },
                        {
                            "content": "<p>Crea una variabile <code>x</code> uguale alla somma di <code>a</code> e <code>b</code> diviso <code>c</code> e\nmoltiplicata per <code>d</code>.</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "a = 2034547;\nb = 1.567;\nc = 6758.768;\nd = 45084;\nx =",
                                "solution": "a = 2034547;\nb = 1.567;\nc = 6758.768;\nd = 45084;\nx = ((a + b) / c) * d;",
                                "validation": "assert(x == (((a + b) / c) * d));",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoiYSA9IDIwMzQ1NDc7XG5iID0gMS41Njc7XG5jID0gNjc1OC43Njg7XG5kID0gNDUwODQ7XG54ID0iLCJzb2x1dGlvbiI6ImEgPSAyMDM0NTQ3O1xuYiA9IDEuNTY3O1xuYyA9IDY3NTguNzY4O1xuZCA9IDQ1MDg0O1xueCA9ICgoYSArIGIpIC8gYykgKiBkOyIsInZhbGlkYXRpb24iOiJhc3NlcnQoeCA9PSAoKChhICsgYikgLyBjKSAqIGQpKTsiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}",
                            "urlName": "operatori-di-base-rgna5u87"
                        }
                    ]
                },
                {
                    "name": "Operatori avanzati",
                    "file": "numbers/advanced.md",
                    "graded": false,
                    "displayName": "Operatori avanzati",
                    "urlName": "operatori-avanzati-r0hw6ycc",
                    "verticals": [
                        {
                            "content": "<h1>Operatori matematici avanzati</h1>\n<p>Fra gli operatori matematici avanzati possiamo trovare l&#x27;operatore di\nmodulo ovvero l&#x27;operatore che ci permette di calcolare il resto della\ndivisione per un determinato numero. L&#x27;operatore &#xE8; rappresentato dalla\nparola <code>mod</code>; nell&#x27;espressione seguente calcoliamo il resto della\ndivisione di tre con due e lo inseriamo nella variabile <code>x</code>:</p>\n<pre><code class=\"language-octave\">x = mod(3,2)\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "operatori-avanzati-d4w1ng4u"
                        },
                        {
                            "content": "<p>Quanto vale la variabile <code>x</code> dell&#x27;esempio precedente?</p>\n",
                            "type": "quiz",
                            "choices": [
                                "3",
                                "1",
                                "2"
                            ],
                            "solutions": [
                                "1"
                            ],
                            "feedback": "Il resto di tre diviso due è uno!",
                            "items": [
                                {
                                    "text": "3",
                                    "correct": false
                                },
                                {
                                    "text": "1",
                                    "correct": true
                                },
                                {
                                    "text": "2",
                                    "correct": false
                                }
                            ],
                            "urlName": "operatori-avanzati-y5u6p4hv"
                        }
                    ]
                }
            ],
            "start": "2016 10 15",
            "displayName": "Numeri",
            "urlName": "numeri-ar9utkjm"
        },
        {
            "name": "Stringhe",
            "sequentials": [
                {
                    "name": "Stringhe",
                    "scheduledWeek": 3,
                    "file": "strings/README.md",
                    "start": "2016 10 22",
                    "graded": false,
                    "displayName": "Stringhe",
                    "urlName": "stringhe-x5uwjveo",
                    "verticals": [
                        {
                            "content": "<h1>Stringhe</h1>\n<p>Le stringhe in Octave sono molto simili ad altri linguaggi di\nprogrammazione. Rappresentano dei dati testuali fra due apici <code>&#x27;</code>.</p>\n<p>Un esempio di stringa &#xE8; la seguente:</p>\n<pre><code class=\"language-matlab\">&#x27;hello world&#x27;\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "stringhe-snrmdd63"
                        }
                    ]
                },
                {
                    "name": "Creazione",
                    "file": "strings/create.md",
                    "graded": false,
                    "displayName": "Creazione",
                    "urlName": "creazione-461e6q03",
                    "verticals": [
                        {
                            "content": "<h1>Creazione</h1>\n<p>Una variabile Octave pu&#xF2; contenere delle stringhe, oltrech&#xE9; numeri; per\ndefinirla basta assegnare la stringa come in questo esempio:</p>\n<pre><code class=\"language-matlab\">a = &#x27;la mia stringa&#x27;;\n</code></pre>\n<p><strong>Note:</strong> Le stringhe non possono essere moltiplicate, sottratte o\ndivise come coi numeri</p>\n",
                            "type": "normal",
                            "urlName": "creazione-aqp6dxym"
                        },
                        {
                            "content": "<p>Crea una variabile <code>str</code> con il valore <code>&#x22;abc&#x22;</code>.</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "% Inserisci qui il tuo codice",
                                "solution": "str = &#39;abc&#39;;",
                                "validation": "assert(str == &#39;abc&#39;);",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoiJSBJbnNlcmlzY2kgcXVpIGlsIHR1byBjb2RpY2UiLCJzb2x1dGlvbiI6InN0ciA9ICdhYmMnOyIsInZhbGlkYXRpb24iOiJhc3NlcnQoc3RyID09ICdhYmMnKTsiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}",
                            "urlName": "creazione-okydg533"
                        }
                    ]
                },
                {
                    "name": "Concatenazione",
                    "file": "strings/concat.md",
                    "graded": false,
                    "displayName": "Concatenazione",
                    "urlName": "concatenazione-gbmiax1e",
                    "verticals": [
                        {
                            "content": "<h1>Concatenazione</h1>\n<p>Quando si parla di concatenazione si intende letteralmente attaccare due\nstringhe insieme per ottenere una stringa unica.</p>\n<p>Supponiamo di voler concatenare le stringhe <code>ciao</code> e <code>mondo</code>; per\nottenere la stringa risultante dobbiamo inserirle in due parentesi\nquadre (quando vedremo gli array questo risulter&#xE0; pi&#xF9; chiaro):</p>\n<pre><code class=\"language-matlab\">[ &#x27;ciao &#x27; &#x27;mondo&#x27;]\n</code></pre>\n<p>Il valore risultante sar&#xE0;:</p>\n<pre><code class=\"language-matlab\">&#x27;ciao mondo&#x27;\n</code></pre>\n<h2>Variabili</h2>\n<p>Ovviamente possiamo fare la stessa cosa anche se le stringhe sono\ncontenute nelle variabili:</p>\n<pre><code class=\"language-matlab\">nome = &#x27;Mario&#x27;\ncognome = &#x27;Rossi&#x27;\nmessaggio = [ nome &#x27; - &#x27; cognome]\n</code></pre>\n<p><code>messaggio</code> conterr&#xE0; dopo l&#x27;ultima istruzione:</p>\n<pre><code class=\"language-matlab\">&#x27;Mario - Rossi&#x27;\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "concatenazione-r0pyei6t"
                        },
                        {
                            "content": "<p>Per completare il seguente programma, concatenare <code>firstName</code> e\n<code>lastName</code> in modo tale che <code>message</code> contenga <code>Hello John Smith</code>:</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "firstName = &quot;John&quot;;\nlastName = &quot;Smith&quot;;\n\nmessage =",
                                "solution": "firstName = &quot;John&quot;;\nlastName = &quot;Smith&quot;;\n\nmessage = [ &#39;Hello &#39; firstName &#39; &#39; lastName ]",
                                "validation": "assert(message == &#39;Hello John Smith&#39;);",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoiZmlyc3ROYW1lID0gXCJKb2huXCI7XG5sYXN0TmFtZSA9IFwiU21pdGhcIjtcblxubWVzc2FnZSA9Iiwic29sdXRpb24iOiJmaXJzdE5hbWUgPSBcIkpvaG5cIjtcbmxhc3ROYW1lID0gXCJTbWl0aFwiO1xuXG5tZXNzYWdlID0gWyAnSGVsbG8gJyBmaXJzdE5hbWUgJyAnIGxhc3ROYW1lIF0iLCJ2YWxpZGF0aW9uIjoiYXNzZXJ0KG1lc3NhZ2UgPT0gJ0hlbGxvIEpvaG4gU21pdGgnKTsiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}",
                            "urlName": "concatenazione-srwfk05d"
                        }
                    ]
                },
                {
                    "name": "Lunghezza",
                    "file": "strings/length.md",
                    "gradeAs": "HW",
                    "format": "HW",
                    "graded": true,
                    "displayName": "Lunghezza",
                    "urlName": "lunghezza-m0v0hxaq",
                    "verticals": [
                        {
                            "content": "<h1>Lunghezza</h1>\n<p>Per calcolare la lunghezza di una stringa, dobbiamo ricorrere alla\nfunzione <code>length</code>, ad esempio:</p>\n<pre><code class=\"language-matlab\">length(&#x27;Hello&#x27;)\n</code></pre>\n<p>Se date il comando precedente sulla linea comando di Octave otterrete la\nrisposta (<code>ans</code>) 5:</p>\n<pre><code class=\"language-matlab\">octave:1&#x3E; length(&#x27;Hello&#x27;)\nans =  5\noctave:2&#x3E;\n</code></pre>\n<p>Siccome il risultato &#xE8; un numero, potete assegnarlo ad un&#x27;altra\nvariabile.</p>\n",
                            "type": "normal",
                            "urlName": "lunghezza-jwo2be8a"
                        },
                        {
                            "content": "<p>Assegnate alla variabile <code>size</code> la lunghezza della stringa memorizzata\nin <code>str</code>:</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "str = &#39;Hello World&#39;;\n\nsize =",
                                "solution": "str = &#39;Hello World&#39;;\n\nsize = length(str);",
                                "validation": "assert(size == str);",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoic3RyID0gJ0hlbGxvIFdvcmxkJztcblxuc2l6ZSA9Iiwic29sdXRpb24iOiJzdHIgPSAnSGVsbG8gV29ybGQnO1xuXG5zaXplID0gbGVuZ3RoKHN0cik7IiwidmFsaWRhdGlvbiI6ImFzc2VydChzaXplID09IHN0cik7IiwiY29udGV4dCI6IiIsImxhbmciOiJtYXRsYWIifQ\"}",
                            "urlName": "lunghezza-oqyokxry",
                            "gradeAs": "HW"
                        }
                    ]
                },
                {
                    "name": "Confronto",
                    "file": "strings/comparators.md",
                    "graded": false,
                    "displayName": "Confronto",
                    "urlName": "confronto-6hs26t1b",
                    "verticals": [
                        {
                            "content": "<h1>Confronto fra stringhe</h1>\n<p>Per confrontare due stringhe si usa la funzione matlab <code>strcmp</code>:</p>\n<pre><code class=\"language-matlab\">risultato = strcmp(&#x27;pippo&#x27;, &#x27;pluto&#x27;)\n</code></pre>\n<p>In questo caso, siccome le due stringhe <code>pippo</code> e <code>pluto</code> sono\ndifferenti, il valore finale di <code>risultato</code> &#xE8; 0.</p>\n<p>Nel caso in cui, le stringhe fossero uguali:</p>\n<pre><code class=\"language-matlab\">risultato = strcmp(&#x27;paperino&#x27;, &#x27;paperino&#x27;)\n</code></pre>\n<p>il valore di <code>risultato</code> sarebbe stato 1.</p>\n",
                            "type": "normal",
                            "urlName": "confronto-tj1v0row"
                        }
                    ]
                }
            ],
            "start": "2016 10 22",
            "displayName": "Stringhe",
            "urlName": "stringhe-0dyyu4u0"
        },
        {
            "name": "Logica Condizionale",
            "sequentials": [
                {
                    "name": "Logica Condizionale",
                    "scheduledWeek": 4,
                    "file": "conditional/README.md",
                    "start": "2016 10 29",
                    "graded": false,
                    "displayName": "Logica Condizionale",
                    "urlName": "logica-condizionale-fllqrk4j",
                    "verticals": [
                        {
                            "content": "<h1>Logica condizionale</h1>\n<p>Una <strong>condizione</strong> serve a testare qualcosa. Le condizioni sono molto\nimportanti nella programmazione, per diversi motivi:</p>\n<ul>\n<li>\n<p>Servono ad assicurare che il tuo programma funzioni,\nindipendentemente dai dati che l&#x27;utente del tuo programma inserisce.\nSe ti fidi di tutti i dati che arriveranno in ingresso al programma,\nquesto probabilmente prima o poi fallir&#xE0;. Se invece verifichi che\nun&#x27;operazione &#xE8; fattibile prima di farla (ovvero il formato dei dati\n&#xE8; corretto e l&#x27;operazione ha senso), allora il tuo programma sar&#xE0;\nmolto pi&#xF9; stabile. Questa precauzione &#xE8; anche <strong>chiamata\nprogrammazione sulla difensiva</strong> per ovvi motivi.</p>\n</li>\n<li>\n<p>Il secondo motivo per cui inserisci delle condizioni nel programma &#xE8;\nper decidere fra due (o pi&#xF9;) modi alternativi di fare i calcoli.\nQueste alternative sono anche chiamati <strong>rami</strong> (o, in inglese,\n&#x22;branches&#x22;) di codice.</p>\n</li>\n</ul>\n<p>In questo capitolo impareremo ad utilizzare le condizioni.</p>\n",
                            "type": "normal",
                            "urlName": "logica-condizionale-masuoali"
                        }
                    ]
                },
                {
                    "name": "If",
                    "file": "conditional/if.md",
                    "graded": false,
                    "displayName": "If",
                    "urlName": "if-fm8nswig",
                    "verticals": [
                        {
                            "content": "<h1>La condizione &#x27;if&#x27;</h1>\n<p>La pi&#xF9; semplice condizione che possiamo inserire in un programma Octave\n&#xE8; la condizione &#x27;<code>if</code>:</p>\n<pre><code class=\"language-matlab\">if mod(3,2) == 1\n  disp(&#x27;Il numero 3 &#xE8; dispari&#x27;)\nend\n</code></pre>\n<p>La condizione <code>if</code> pi&#xF9; semplice &#xE8; nella forma:</p>\n<pre><code>if &#xAB;ESP&#xBB;\n    &#xAB;COMANDI&#xBB;\nend\n</code></pre>\n<p>Per poter eseguire <code>&#xAB;COMANDI&#xBB;</code> l&#x27;espressione <code>&#xAB;ESP&#xBB;</code> deve essere uguale\na 1 (o anche maggiore). <strong>Se <code>&#xAB;ESP&#xBB;</code> risulta uguale a 0, i <code>&#xAB;COMANDI&#xBB;</code>\nnon vengono eseguiti!</strong></p>\n<h2>Condizioni <code>if</code> con stringhe</h2>\n<p>La funzione <code>strcmp</code> confronta due stringhe e vale 1 quando sono uguali,\n0 altrimenti; questo significa che possiamo usarla nelle condizioni <code>if</code>\nper confrontare stringhe, quasi come se fossero numeri:</p>\n<pre><code class=\"language-matlab\">nazione = &#x27;Francia&#x27;\n\nif strcmp(nazione, &#x27;Inghilterra&#x27;)\n  tempo = &#x27;orribile&#x27;\n  cibo = &#x27;riempie molto&#x27;\n  moneta = &#x27;il british pound&#x27;\nend\n\nif strcmp(nazione, &#x27;Francia&#x27;)\n  tempo = &#x27;bello&#x27;\n  cibo = &#x27;&#xE8; buono ma poco vegetariano&#x27;\n  moneta = &#x27;Euro&#x27;\nend\n\nmessaggio = [ &#x27;Questa &#xE8; la &#x27; nazione &#x27;, il tempo &#xE8; &#x27; tempo &#x27;, il cibo &#x27; cibo &#x27; e la moneta &#xE8; &#x27; moneta &#x27;.&#x27;]\n\n\ndisp(messaggio)\n</code></pre>\n<p>Come abbiamo visto precedentemente le istruzioni di questo programma\nsono eseguite, dal calcolatore in sequenza. C&#x27;&#xE8; per&#xF2; una particolarit&#xE0;.\nDopo aver assegnato il valore <code>Francia</code> alla variabile <code>nazione</code> (riga\n1), il calcolatore incontra <code>if strcmp(nazione, &#x27;Inghilterra&#x27;)</code>.\nL&#x27;effetto &#xE8; che gli assegnamenti che si trovano entro il primo <code>end</code>:</p>\n<pre><code class=\"language-matlab\">tempo = &#x27;orribile&#x27;\ncibo = &#x27;riempie molto&#x27;\nmoneta = &#x27;il british pound&#x27;\n</code></pre>\n<p>verranno non effettuati, poich&#xE8;, in questo caso, <code>nazione</code> &#xE8; diverso da\n<code>Inghilterra</code>.</p>\n<p>Quando il calcolatore incontra il secondo <code>if</code> (subito dopo aver saltato\nil primo), gli assegnamenti compresi entro il primo <code>end</code>:</p>\n<pre><code class=\"language-matlab\">tempo = &#x27;bello&#x27;\ncibo = &#x27;&#xE8; buono ma poco vegetariano&#x27;\nmoneta = &#x27;Euro&#x27;\n</code></pre>\n<p>vengono effettivamente eseguiti.</p>\n<p>Il <code>messaggio</code> stampato sar&#xE0; quindi:</p>\n<pre><code>Questa &#xE8; la Francia, il tempo &#xE8; bello, il cibo &#xE8; buono ma poco vegetariano e la moneta &#xE8; Euro.\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "if-ixtatuu5"
                        },
                        {
                            "content": "<p>Completare il programma qui sotto in modo tale che stampi la stringa\n<code>il numero &#xE8; dispari</code>:</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "numero =\n\nif (mod(numero,2) ~= 0)\n  disp(&#39;il numero è dispari&#39;)\nend\n\nif (mod(numero,2) == 0)\n  disp(&#39;il numero è pari&#39;)\nend",
                                "solution": "numero =1\n\nif (mod(numero,2) ~= 0)\n  disp(&#39;il numero è dispari&#39;)\nend\n\nif (mod(numero,2) == 0)\n  disp(&#39;il numero è pari&#39;)\nend",
                                "validation": "assert(mod(numero,2));",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoibnVtZXJvID1cblxuaWYgKG1vZChudW1lcm8sMikgfj0gMClcbiAgZGlzcCgnaWwgbnVtZXJvIMOoIGRpc3BhcmknKVxuZW5kXG5cbmlmIChtb2QobnVtZXJvLDIpID09IDApXG4gIGRpc3AoJ2lsIG51bWVybyDDqCBwYXJpJylcbmVuZCIsInNvbHV0aW9uIjoibnVtZXJvID0xXG5cbmlmIChtb2QobnVtZXJvLDIpIH49IDApXG4gIGRpc3AoJ2lsIG51bWVybyDDqCBkaXNwYXJpJylcbmVuZFxuXG5pZiAobW9kKG51bWVybywyKSA9PSAwKVxuICBkaXNwKCdpbCBudW1lcm8gw6ggcGFyaScpXG5lbmQiLCJ2YWxpZGF0aW9uIjoiYXNzZXJ0KG1vZChudW1lcm8sMikpOyIsImNvbnRleHQiOiIiLCJsYW5nIjoibWF0bGFiIn0\"}",
                            "urlName": "if-lxkhl79r"
                        }
                    ]
                },
                {
                    "name": "Else",
                    "file": "conditional/else.md",
                    "graded": false,
                    "displayName": "Else",
                    "urlName": "else-o8t4l0dw",
                    "verticals": [
                        {
                            "content": "<h1>Else</h1>\n<p>Alle volte avete bisogno di specificare le azioni da effettuare sia nel\ncaso in cui una condizione sia vera, sia che sia falsa:</p>\n<pre><code class=\"language-matlab\">if strcmp(nazione, &#x27;Inghilterra&#x27;)\n  ombrelloObbligatorio = &#x22;si&#x22;\nelse\n  ombrelloObbligatorio = &#x22;no&#x22;\nend\n</code></pre>\n<h2>Condizioni innestate</h2>\n<p>Potete avere condizioni innestate l&#x27;una nell&#x27;altra, per raffinare e\naumentare la scelta delle azioni alternative; ad esempio:</p>\n<pre><code class=\"language-matlab\">if strcmp(nazione, &#x27;Inghilterra&#x27;)\n  ombrelloObbligatorio = &#x22;si&#x22;\nelse\n  if strcmp(nazione, &#x22;Germania&#x22;)\n    ombrelloObbligatorio = &#x22;forse&#x22;\n  else\n    ombrelloObbligatorio = &#x22;no&#x22;\n  end\nend\n</code></pre>\n<p>Completare l&#x27;assegnamento a <code>nome</code> per fare in modo che venga stampata\nla stringa &#x27;Ciao Aaron&#x27;</p>\n",
                            "type": "normal",
                            "urlName": "else-ei6xq84q"
                        }
                    ]
                },
                {
                    "name": "Composizione",
                    "file": "conditional/concatenate.md",
                    "graded": false,
                    "displayName": "Composizione",
                    "urlName": "composizione-eh87wcrj",
                    "verticals": [
                        {
                            "content": "<h1>Condizioni complesse</h1>\n<p>Se la nostra condizione &#xE8; composta da pi&#xF9; condizioni semplici, possiamo\nconcatenarle con gli <strong>operatori logici</strong> &#xAB;AND&#xBB; e &#xAB;OR&#xBB;, definite solo\nper i tipi booleani.</p>\n<p>Supponete che vogliate effettuare qualche calcolo solo se una variabile\n(<code>x</code>) &#xE8; compresa fra 10 e 20; formalmente la vostra condizione sar&#xE0;\ncomposta da due condizioni in &#xAB;AND&#xBB; logico:</p>\n<pre><code>x &#xAB;MAGGIORE DI&#xBB; 10 &#xAB;AND&#xBB; x &#xAB;MINORE DI&#xBB; 20\n</code></pre>\n<p>In Matlab traduciamo &#xAB;AND&#xBB; con l&#x27;operatore <code>&#x26;&#x26;</code>:</p>\n<pre><code class=\"language-matlab\">if (x &#x3E; 10 &#x26;&#x26; x &#x3C; 20)\n...\nend\n</code></pre>\n<p>Se invece voleste essere sicuri che <code>nazione</code> sia &#x27;Inghilterra&#x27;\n<strong>oppure</strong> &#x27;Germania&#x27;, usate l&#x27;operatore &#xAB;OR&#xBB; <code>||</code>:</p>\n<pre><code class=\"language-matlab\">if strcmp(nazione, &#x27;Inghilterra&#x27;) || strcmp(nazione, &#x27;Germania&#x27;)\n...\nend\n</code></pre>\n<p><strong>Nota</strong>: Proprio come le operazioni sui numeri, potete raggruppare le\ncondizioni fra parentesi per forzare la precedenza, poich&#xE9; &#xAB;AND&#xBB; ha\nsempre precedenza su &#xAB;OR&#xBB;:</p>\n<pre><code class=\"language-matlab\">if (x==1 || x==3) &#x26;&#x26; (y==2)\n...\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "composizione-cqc9wcr2"
                        },
                        {
                            "content": "<p>Riempi la condizione qui sotto in modo tale che venga assegnato\n<code>John di Inghilterra</code> a categoria solo se <code>nome</code> &#xE8; &#x27;John&#x27; <code>nazione</code> &#xE8;\nInghilterra.</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "nome = &quot;John&quot;;\nnazione = &quot;Inghilterra&quot;;\ncategoria = &quot;Boh&quot;\n\nif % riempi qui\n    categoria = &quot;John di Inghilterra&quot;\nend",
                                "solution": "nome = &quot;John&quot;;\nnazione = &quot;Inghilterra&quot;;\ncategoria = &quot;Boh&quot;\n\nif strcmp(nome, &#39;John&#39;) &amp;&amp; strcmp(nazione, &#39;Inghilterra&#39;)\n    categoria = &quot;John di Inghilterra&quot;\nend",
                                "validation": "assert(strcmp(categoria,&quot;John di Inghilterra&quot;));",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoibm9tZSA9IFwiSm9oblwiO1xubmF6aW9uZSA9IFwiSW5naGlsdGVycmFcIjtcbmNhdGVnb3JpYSA9IFwiQm9oXCJcblxuaWYgJSByaWVtcGkgcXVpXG4gICAgY2F0ZWdvcmlhID0gXCJKb2huIGRpIEluZ2hpbHRlcnJhXCJcbmVuZCIsInNvbHV0aW9uIjoibm9tZSA9IFwiSm9oblwiO1xubmF6aW9uZSA9IFwiSW5naGlsdGVycmFcIjtcbmNhdGVnb3JpYSA9IFwiQm9oXCJcblxuaWYgc3RyY21wKG5vbWUsICdKb2huJykgJiYgc3RyY21wKG5hemlvbmUsICdJbmdoaWx0ZXJyYScpXG4gICAgY2F0ZWdvcmlhID0gXCJKb2huIGRpIEluZ2hpbHRlcnJhXCJcbmVuZCIsInZhbGlkYXRpb24iOiJhc3NlcnQoc3RyY21wKGNhdGVnb3JpYSxcIkpvaG4gZGkgSW5naGlsdGVycmFcIikpOyIsImNvbnRleHQiOiIiLCJsYW5nIjoibWF0bGFiIn0\"}",
                            "urlName": "composizione-qgut5erg"
                        }
                    ]
                }
            ],
            "start": "2016 10 29",
            "displayName": "Logica Condizionale",
            "urlName": "logica-condizionale-psfke8al"
        },
        {
            "name": "Funzioni",
            "sequentials": [
                {
                    "name": "Funzioni",
                    "scheduledWeek": 5,
                    "file": "functions/README.md",
                    "start": "2016 11 05",
                    "graded": false,
                    "displayName": "Funzioni",
                    "urlName": "funzioni-qn6485hu",
                    "verticals": [
                        {
                            "content": "<h1>Le funzioni</h1>\n<p>Le funzioni sono uno dei concetti pi&#xF9; importanti nella programmazione e\nsono presenti praticamente in ogni linguaggio di programmazione.</p>\n<p>Vediamo il problema che le funzioni risolvono.</p>\n<p>Supponete di voler elevare al cubo un numero, diciamo <code>4</code>, in Octave;\ndescrivereste il seguente programma:</p>\n<pre><code class=\"language-matlab\">&#x3E; 4*4*4\n</code></pre>\n<p>Se voleste calcolare il cubo non solo di <code>4</code> ma anche di <code>12</code>:</p>\n<pre><code class=\"language-matlab\">&#x3E; 4*4*4  \n&#x3E; 12*12*12\n</code></pre>\n<p>Se doveste calcolare i cubi di un insieme pi&#xF9; grande di numeri, risulta\nchiaro che si tratta di aggiungere tante righe quanti sono i numeri di\ncui volete calcolare il cubo; ogni riga moltiplicherebbe il numero per\nse stesso due volte. Riusciamo a effettuare gli stessi calcoli evitando\ndi specificare ad ogni riga come si eleva al cubo un numero?</p>\n<p>La risposta &#xE8; si, utilizzando una funzione:</p>\n<pre><code class=\"language-matlab\">function r = cubo(a)\n  r = a*a*a\nend\n\ncubo(4)\ncubo(12)\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "funzioni-djmellf5"
                        }
                    ]
                },
                {
                    "name": "Dichiarazione",
                    "file": "functions/declare.md",
                    "graded": false,
                    "displayName": "Dichiarazione",
                    "urlName": "dichiarazione-obp74n64",
                    "verticals": [
                        {
                            "content": "<h1>Dichiarare una funzione</h1>\n<p>Cosa significa effettivamente la prima parte del programma precedente?</p>\n<pre><code class=\"language-matlab\">function r = cubo(a)\n  r = a*a*a\nend\n</code></pre>\n<p>E&#x27; la descrizione di come elevare al cubo qualsiasi numero: possiamo\nleggerla in questo modo:</p>\n<blockquote>\n<p>Per elevare al <strong><code>cubo</code></strong> il numero <strong><code>a</code></strong>, il risultato <strong><code>r</code></strong> deve\nessere calcolato come <strong><code>a &#xD7; a &#xD7; a</code></strong></p>\n</blockquote>\n<p>La descrizione del metodo &#xE8; chiamata <strong>dichiarazione di funzione</strong>. Le\nlinee di codice tra <code>function</code> ed <code>end</code> sono chiamate <strong>corpo della\nfunzione</strong> e possono essere anche una sequenza complessa (contenente\ncondizioni, cicli e quant&#x27;altro).</p>\n<p>Due nozioni da sapere:</p>\n<ul>\n<li>\n<p>la variabile <code>a</code> &#xE8; chiamata <strong>parametro formale in ingresso</strong>, o\nanche semplicemente <strong>parametro in ingresso</strong>.</p>\n</li>\n<li>\n<p>La variabile <code>r</code> &#xE8; chiamata <strong>valore di ritorno</strong> della funzione.</p>\n</li>\n</ul>\n",
                            "type": "normal",
                            "urlName": "dichiarazione-i38eb08q"
                        },
                        {
                            "content": "<p>Modificare la funzione <code>cubo</code> in modo tale che ritorni <code>1</code> <strong>se e solo\nse</strong> il valore di <code>a</code> &#xE8; maggiore di <code>4</code>, altrimenti si comporta come\nquella gi&#xE0; definita. Nota: Ricordare che le linee di codice tra\n<code>function</code> ed <code>end</code> possono essere anche una sequenza complessa\n(contenente condizioni, cicli e quant&#x27;altro).</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "function r = cubo(a)\n  r = a*a*a\nend",
                                "solution": "function r = cubo(a)\n  if a &gt; 4\n    r = 1\n  else\n    r = a*a*a\n  end\nend",
                                "validation": "assert(cubo(3) == 9)\nassert(cubo(4) == 1)",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoiZnVuY3Rpb24gciA9IGN1Ym8oYSlcbiAgciA9IGEqYSphXG5lbmQiLCJzb2x1dGlvbiI6ImZ1bmN0aW9uIHIgPSBjdWJvKGEpXG4gIGlmIGEgPiA0XG4gICAgciA9IDFcbiAgZWxzZVxuICAgIHIgPSBhKmEqYVxuICBlbmRcbmVuZCIsInZhbGlkYXRpb24iOiJhc3NlcnQoY3VibygzKSA9PSA5KVxuYXNzZXJ0KGN1Ym8oNCkgPT0gMSkiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}",
                            "urlName": "dichiarazione-arwlpg0o"
                        }
                    ]
                },
                {
                    "name": "Utilizzo",
                    "file": "functions/use.md",
                    "graded": false,
                    "displayName": "Utilizzo",
                    "urlName": "utilizzo-ue0uteje",
                    "verticals": [
                        {
                            "content": "<h1>Invocare una funzione</h1>\n<p>Dichiarare il metodo da usare per elevare al cubo un numero non ha molto\nsenso se non lo si usa. Per <strong>usare</strong> il metodo appena definito, bisogna\ninvocarlo:</p>\n<pre><code class=\"language-matlab\">...\ncubo(4)\ncubo(12)\n</code></pre>\n<p>Ciascuna delle due invocazioni di cui sopra ha come effetto di produrre\nil cubo di un numero sfruttando il metodo predefinito. Pi&#xF9; o meno il\ncomando <code>cubo(4)</code> dice:</p>\n<blockquote>\n<p>Segui il metodo con nome <code>cubo</code> ipotizzando che <code>a</code> sia uguale a <code>4</code></p>\n</blockquote>\n",
                            "type": "normal",
                            "urlName": "utilizzo-3nc514g4"
                        }
                    ]
                },
                {
                    "name": "Invocazioni innestate",
                    "file": "functions/nested.md",
                    "graded": false,
                    "displayName": "Invocazioni innestate",
                    "urlName": "invocazioni-innestate-v8e9s2mh",
                    "verticals": [
                        {
                            "content": "<h1>Invocazione innestata di funzioni</h1>\n<p>Ricapitolando ci&#xF2; che abbiamo visto fin&#x27;ora:</p>\n<ul>\n<li>\n<p>Scrivere una funzione significa scrivere il metodo per risolvere un\nproblema a partire da un insieme di dati iniziali generici.</p>\n</li>\n<li>\n<p>Invocare una funzione significa risolvere il problema per dati\nspecifici.</p>\n</li>\n</ul>\n<p>Bench&#xE9; sia possibile risolvere un problema grosso all&#x27;interno di una\nsingola funzione, in informatica si cerca il pi&#xF9; possibile di\nriutilizzare funzioni gi&#xE0; esistenti.</p>\n<p>Supponiamo di voler descrivere il metodo per calcolare la distanza di un\npunto di coordinate <code>(x,y)</code> dal centro del piano cartesiano con una\nfunzione Octave:</p>\n<pre><code class=\"language-matlab\">function d = calcolaDistanza(x,y)\n  ...\nend\n</code></pre>\n<p>Un approccio per completare la funzione &#xE8; quello di descrivere nei\nminimi dettagli la soluzione del problema utilizzando solo gli operatori\nbase dell&#x27;aritmetica (<code>*</code>, <code>+</code>, <code>-</code>, <code>/</code>) e qualche ciclo iterativo.</p>\n<p>L&#x27;approccio &#xE8; legittimo ma ci porterebbe a descrivere una funzione molto\nlunga e, con molta probabilit&#xE0;, contenente errori.</p>\n<p>Un secondo approccio &#xE8; quello di sfruttare una funzione gi&#xE0; scritta\ndagli sviluppatori di Octave per elevare a potenza dei numeri: <code>power</code>\n<a href=\"https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html#XREFpower\">(manuale)</a>.</p>\n<p>Seguendo questo approccio, possiamo scrivere la funzione\n<code>calcolaDistanza</code> utilizzando il <a href=\"http://it.wikipedia.org/wiki/Teorema_di_Pitagora\">teorema di\nPitagora</a>:</p>\n<pre><code class=\"language-matlab\">function d = calcolaDistanza(x,y)\n  d = pow(pow(x,2)+pow(y,2), 1/2)\nend\n</code></pre>\n<p>Octave ha un insieme enorme di <a href=\"http://octave.sourceforge.net/octave/overview.html\">funzioni gi&#xE0;\nscritte</a>. Prima di\niniziare a scrivere una vostra funzione, cercate di capire se pu&#xF2; essere\nscritta sfruttando funzioni gi&#xE0; esistenti.</p>\n",
                            "type": "normal",
                            "urlName": "invocazioni-innestate-bnjql3ba"
                        },
                        {
                            "content": "<p>Scrivere una funzione che calcola la distanza di un punto\ntridimensionale dal centro degli assi:</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "function d = calcolaDistanza(x,y,z)\n\nend",
                                "solution": "function d = calcolaDistanza(x,y,z)\n  d = pow(pow(x,2)+pow(y,2)+pow(z,2), 1/2)\nend",
                                "validation": "assert(calcolaDistanza(1,0,1) - 1 &lt; epsilon)",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoiZnVuY3Rpb24gZCA9IGNhbGNvbGFEaXN0YW56YSh4LHkseilcblxuZW5kIiwic29sdXRpb24iOiJmdW5jdGlvbiBkID0gY2FsY29sYURpc3RhbnphKHgseSx6KVxuICBkID0gcG93KHBvdyh4LDIpK3Bvdyh5LDIpK3Bvdyh6LDIpLCAxLzIpXG5lbmQiLCJ2YWxpZGF0aW9uIjoiYXNzZXJ0KGNhbGNvbGFEaXN0YW56YSgxLDAsMSkgLSAxIDwgZXBzaWxvbikiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}",
                            "urlName": "invocazioni-innestate-7y8oos0r"
                        }
                    ]
                },
                {
                    "name": "Ricorsione",
                    "file": "functions/recursion.md",
                    "graded": false,
                    "displayName": "Ricorsione",
                    "urlName": "ricorsione-55lkd4l9",
                    "verticals": [
                        {
                            "content": "<h1>Ricorsione</h1>\n<p>Supponiamo di voler scrivere il metodo per calcolare <a href=\"http://it.wikipedia.org/wiki/Fattoriale\">il fattoriale di\nun numero</a>.</p>\n<pre><code class=\"language-matlab\">function f = fattoriale(n)\n...\nend\n</code></pre>\n<p>Prima di accingerci a farlo, vediamo alcuni esempi per qualche numero:</p>\n<ul>\n<li>fattoriale di 1 = 1</li>\n<li>fattoriale di 2 = 2 * 1</li>\n<li>fattoriale di 3 = 3 * 2 * 1</li>\n<li>fattoriale di 4 = 4 * 3 * 2 * 1</li>\n<li>e cos&#xEC; via..</li>\n</ul>\n<p>Ci accorgiamo subito di una <strong>regolarit&#xE0; del metodo</strong>, ovvero che, a\nparte il fattoriale di 1:</p>\n<ul>\n<li>fattoriale di 2 = 2 * fattoriale di 1</li>\n<li>fattoriale di 3 = 3 * fattoriale di 2</li>\n<li>fattoriale di 4 = 4 * fattoriale di 3</li>\n<li>e cos&#xEC; via..</li>\n</ul>\n<p>Possiamo dire che il metodo generale per calcolare il fattoriale di <code>n</code>\n&#xE8;, per <code>n</code> diverso da 1:</p>\n<ul>\n<li>fattoriale di n = n * fattoriale di (n-1)</li>\n</ul>\n<p>Il caso particolare di <code>n=1</code> &#xE8; detto <strong>caso base</strong>, ovvero l&#x27;unico\nvalore di <code>n</code> per cui non vale la definizione appena data.</p>\n<p>Siccome la definizione della funzione <code>fattoriale</code> ricorre a se stessa\nper risolvere il problema, viene detta\n<a href=\"http://it.wikipedia.org/wiki/Funzione_ricorsiva\"><strong>ricorsiva</strong></a>.</p>\n<h2>Ricorsione in Octave</h2>\n<p>Octave ci permette di descrivere soluzioni ricorsive in maniera\nabbastanza intuitiva. Dobbiamo stare solo attenti a capire quando\nbisogna applicare la regola ricorsiva e quando, invece, dobbiamo\napplicare il caso base. La definizione ricorsiva del fattoriale in\nOctave &#xE8; la seguente:</p>\n<pre><code class=\"language-matlab\">function f = fattoriale(n)\n  if n == 1\n    f = 1\n  else\n    f = n * fattoriale(n-1)\nend\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "ricorsione-qmsdjr50"
                        },
                        {
                            "content": "<p>Scrivere una funzione ricorsiva <code>somma(n)</code> che effettua la somma di\ntutti i numeri da <code>1</code> ad <code>n</code>:</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "function r = somma(a)\n\nend",
                                "solution": "function r = somma(n)\n  if n == 1\n    r = 1\n  else\n    r = n + somma(n-1)\nend",
                                "validation": "assert(somma(5) == 15)",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoiZnVuY3Rpb24gciA9IHNvbW1hKGEpXG5cbmVuZCIsInNvbHV0aW9uIjoiZnVuY3Rpb24gciA9IHNvbW1hKG4pXG4gIGlmIG4gPT0gMVxuICAgIHIgPSAxXG4gIGVsc2VcbiAgICByID0gbiArIHNvbW1hKG4tMSlcbmVuZCIsInZhbGlkYXRpb24iOiJhc3NlcnQoc29tbWEoNSkgPT0gMTUpIiwiY29udGV4dCI6IiIsImxhbmciOiJtYXRsYWIifQ\"}",
                            "urlName": "ricorsione-e0velcmw"
                        }
                    ]
                },
                {
                    "name": "Funzioni di ordine superiore",
                    "file": "functions/higher_order.md",
                    "graded": false,
                    "displayName": "Funzioni di ordine superiore",
                    "urlName": "funzioni-di-ordine-superiore-ejmiy332",
                    "verticals": [
                        {
                            "content": "<h1>Funzioni di ordine superiore</h1>\n<p><a href=\"http://it.wikipedia.org/wiki/Funzione_di_ordine_superiore\">Da\nwikipedia</a>:\nUna funzione di <strong>ordine superiore</strong> &#xE8; una funzione che pu&#xF2; prendere\naltre funzioni come parametri e/o restituire funzioni come risultato.\nL&#x27;operatore differenziale in matematica &#xE8; un esempio di funzione di\nordine superiore.</p>\n<p>Le funzioni di ordine superiore sono quindi funzioni che manipolano\naltre funzioni.</p>\n<h2>Prologo: variabili che sono sinonimi di funzioni</h2>\n<p>Prima di introdurre le funzioni di ordine superiore, diamo un&#x27;occhiata a\ncosa significa assegnare una funzione ad una variabile.</p>\n<p>Ricordiamo innanzitutto che una variabile &#xE8; un contenitore. Possiamo\ninserire al suo interno valori di vario tipo (numeri, vettori, matrici e\ncos&#xEC; via). Octave permette di fare una cosa in pi&#xF9;; possiamo anche\ninserire una <strong>funzione</strong> in una variabile. Ecco il codice che assegna\nla funzione <code>incrementa</code> alla variabile <code>a</code>:</p>\n<pre><code class=\"language-matlab\">% &#x60;incrementa&#x60;:\nfunction [y] = incrementa(x)\n  y = x+1;\nend\n\na = @incrementa\n</code></pre>\n<p>Attenzione: non &#xE8; una invocazione! Stiamo semplicemente <strong>creando un\nsinonimo</strong> per funzione <code>incrementa</code> che si chiama <code>a</code>.</p>\n<p>Possiamo invocare <code>a</code> proprio come <code>incrementa</code>:</p>\n<pre><code class=\"language-matlab\">a = @incrementa\noctave:5&#x3E; a(1)\nans =  2\n</code></pre>\n<h2>Esempio di funzione superiore</h2>\n<p>Il seguente codice mostra come creare una funzione di ordine superiore\nche applica una funzione passata come parametro ad un vettore in\ningresso:</p>\n<pre><code class=\"language-matlab\">% &#x60;applica&#x60;: applica la funzione &#x60;a&#x60; a tutti gli elementi\n% del vettore &#x60;v&#x60; e ritorna v1\nfunction [v1] = applica(a, v)\n  v1 = [];\n  for i = 1:length(v)\n    v1 = [v1 a(v(i))];\n  end\nend\n</code></pre>\n<p>Possiamo invocare la funzione applica con il sinonimo di <code>incrementa</code>\nper aggiungere 1 a tutti gli elementi di un vettore:</p>\n<pre><code class=\"language-matlab\">octave:7&#x3E; v = [3 4 8]\nv =\n\n   3   4   8\n\noctave:8&#x3E;\noctave:8&#x3E; v1 = applica(@incrementa, v)\nv1 =\n\n   4   5   9\n</code></pre>\n<p>La funzione applica &#xE8; di utilizzo cos&#xEC; comune in Octave che &#xE8; stata\ninserita direttamente nel linguaggio sotto il nome di <code>arrayfun</code>:</p>\n<pre><code class=\"language-matlab\">octave&#x3E; help arrayfun\n  -- Function File:  arrayfun (FUNC, A)\n     ...\n     Execute a function on each element of an array.  This is useful for\n     functions that do not accept array arguments.  If the function does\n     accept array arguments it is better to call the function directly.\n</code></pre>\n<h2>Funzioni anonime</h2>\n<p>Possiamo definire in maniera molto veloce dei sinonimi di funzioni,\naddirittura senza che queste abbiano un nome predefinito (funzioni\nanonime). Qui di seguito, ad esempio, <code>b</code> diventa il sinonimo di una\nfunzione che riceve il valore <code>x</code> e ritorna <code>x-1</code>:</p>\n<pre><code class=\"language-matlab\">b = @(x) x - 1\n</code></pre>\n<p>Utilizzare <code>arrayfun</code> per effettuare manipolazioni di vettore diventa\nancora pi&#xF9; semplice; ad esempio, in questa sessione usiamo <code>arrayfun</code>\nper decrementare gli elementi del vettore:</p>\n<pre><code class=\"language-matlab\">octave:9&#x3E; v2 = arrayfun(v, @(x)x-1)\nv2 =\n\n   2   3   7\n</code></pre>\n<p>Completare la funzione di ordine superiore <code>filtra</code> che riceve un\nvettore <code>v</code> ed una funzione <code>p(x)</code> che ritorna 0 oppure 1. <code>filtra</code></p>\n",
                            "type": "normal",
                            "urlName": "funzioni-di-ordine-superiore-e41synf7"
                        },
                        {
                            "content": "<p>ritorna un vettore i cui elementi <code>e</code> sono gli elementi di <code>v</code> per cui\n<code>p(e)</code> ha ritornato 1.</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "function v1 = filtra(p, v)\n  v1 = []\n  for x=1:size(v,2)\n\n\n\n\n  end\nend\n\nris = filtra(@(x) x&gt;1, [1,2,3])",
                                "solution": "function v1 = filtra(p, v)\n  v1 = []\n  for x=1:size(v,2)\n    x\n    if(p(v(x)))\n      v1 = [v1 v(x)]\n    end\n  end\nend\n\nris = filtra(@(x) x&gt;1, [1,2,3])",
                                "validation": "assert(ris == [2, 3])",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoiZnVuY3Rpb24gdjEgPSBmaWx0cmEocCwgdilcbiAgdjEgPSBbXVxuICBmb3IgeD0xOnNpemUodiwyKVxuXG5cblxuXG4gIGVuZFxuZW5kXG5cbnJpcyA9IGZpbHRyYShAKHgpIHg-MSwgWzEsMiwzXSkiLCJzb2x1dGlvbiI6ImZ1bmN0aW9uIHYxID0gZmlsdHJhKHAsIHYpXG4gIHYxID0gW11cbiAgZm9yIHg9MTpzaXplKHYsMilcbiAgICB4XG4gICAgaWYocCh2KHgpKSlcbiAgICAgIHYxID0gW3YxIHYoeCldXG4gICAgZW5kXG4gIGVuZFxuZW5kXG5cbnJpcyA9IGZpbHRyYShAKHgpIHg-MSwgWzEsMiwzXSkiLCJ2YWxpZGF0aW9uIjoiYXNzZXJ0KHJpcyA9PSBbMiwgM10pIiwiY29udGV4dCI6IiIsImxhbmciOiJtYXRsYWIifQ\"}",
                            "urlName": "funzioni-di-ordine-superiore-nko8nust"
                        }
                    ]
                }
            ],
            "start": "2016 11 05",
            "displayName": "Funzioni",
            "urlName": "funzioni-2osl2sxs"
        },
        {
            "name": "Strutture Dati",
            "sequentials": [
                {
                    "name": "Strutture Dati",
                    "scheduledWeek": 6,
                    "file": "objects/README.md",
                    "start": "2016 11 12",
                    "graded": false,
                    "displayName": "Strutture Dati",
                    "urlName": "strutture-dati-lk16b5j6",
                    "verticals": [
                        {
                            "content": "<h1>Strutture dati</h1>\n<p>Matrici e vettori ci permettono di descrivere gli algoritmi in maniera\nsintetica ed espressiva, semplicemente facendo riferimento ai nomi delle\nvariabili, senza scendere nel dettaglio delle operazioni sui singoli\nelementi. Ad esempio, se abbiamo due vettori di 4 numeri <code>a</code> e <code>b</code>, la\nsomma elemento per elemento dei due vettori &#xE8; esprimibile sinteticamente\ncome:</p>\n<pre><code class=\"language-matlab\">a + b\n</code></pre>\n<p>La possibilit&#xE0; di utilizzare espressioni sintetiche per descrivere\noperazioni complesse significa alzare il livello di <strong>astrazione</strong> nel\nlinguaggio.</p>\n<p>Fino ad ora per&#xF2; abbiamo visto come lavorare con dati <strong>omogenei</strong>\nall&#x27;interno di vettori e matrici. Cosa significa questo? Significa che\nall&#x27;interno di un vettore possiamo rappresentare solo dati dello stesso\ntipo e distinguibili solo in termini di posizione all&#x27;interno del\nvettore.</p>\n<p>Ma se invece di una serie di coordinate volessimo esprimere i dati\nanagrafici di uno studente universitario, potremmo ancora utilizzare un\nvettore? La risposta &#xE8; no. Uno studente ha un <strong>nome</strong>, <strong>cognome</strong> e\n<strong>data di nascita</strong>. Mentre le prime due sono stringhe, la terza &#xE8;\ncomposta da tre informazioni numeriche: <strong>giorno</strong>, <strong>mese</strong> ed\n<strong>anno</strong>. Siamo quindi in presenza di informazioni <strong>eterogenee</strong>.</p>\n<p>Le variabili possono rappresentare strutture eterogenee (anche dette\n<strong>strutture dati</strong>) in cui le varie informazioni prendono il nome di\n<strong>campi</strong> della struttura eterogenea dei dati.</p>\n",
                            "type": "normal",
                            "urlName": "strutture-dati-ao3p6754"
                        }
                    ]
                },
                {
                    "name": "Creazione",
                    "file": "objects/creation.md",
                    "gradeAs": "Lab",
                    "format": "Lab",
                    "graded": true,
                    "displayName": "Creazione",
                    "urlName": "creazione-vego9vcm",
                    "verticals": [
                        {
                            "content": "<h1>Creazione</h1>\n<p>Per creare una variabile octave con informazioni relative ad uno\nstudente, dobbiamo <strong>costruire una struttura dati</strong>. Se volessi inserire\nl&#x27;anagrafica di quando ero studente io all&#x27;interno di una variabile <code>x</code>,\nla genererei cosi:</p>\n<pre><code class=\"language-matlab\">x.nome = &#x27;Vittorio&#x27;\nx.cognome = &#x27;Zaccaria&#x27;\nx.meseNascita = 7\nx.giornoNascita = 10\nx.annoNascita = ... % segreto :)\n</code></pre>\n<p>Dove con <code>x.nome = &#x27;Vittorio&#x27;</code> intendo dire che il campo <code>nome</code> della\nvariabile <code>x</code> deve essere uguale alla stringa <code>Vittorio</code>.</p>\n<p>Se interrogo octave sul valore complessivo della variabile <code>x</code> ottengo:</p>\n<pre><code class=\"language-matlab\">octave:7&#x3E; x\nx =\n\n  scalar structure containing the fields:\n\n    nome = Vittorio\n    cognome = Zaccaria\n    meseNascita =  7\n    giornoNascita =  10\n</code></pre>\n<p>In alternativa posso creare la variabile <code>x</code> in un solo assegnamento,\nutilizzando la funzione <code>struct</code> e specificando in maniera alternata i\ncampi e i loro valori:</p>\n<pre><code class=\"language-matlab\">x = struct(&#x27;nome&#x27;, &#x27;Vittorio&#x27;, &#x27;cognome&#x27;, &#x27;Zaccaria&#x27;, &#x27;meseNascita&#x27;, 7, giornoNascita, 10)\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "creazione-4bqdjurj"
                        },
                        {
                            "content": "<p>Creare una variabile struttura dati <code>k</code> che contenga un campo\n<code>nomeSquadra</code> pari alla stringa <code>Milan</code> e un campo &#x27;scudetti&#x27; con il\nnumero degli scudetti vinti dal Milan.</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "",
                                "solution": "k.nomeSquadra = &#39;Milan&#39;\nk.scudetti = 29",
                                "validation": "assert(k.nomeSquadra == &#39;Milan&#39;)\nassert(k.scudetti &gt; 0)",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoiIiwic29sdXRpb24iOiJrLm5vbWVTcXVhZHJhID0gJ01pbGFuJ1xuay5zY3VkZXR0aSA9IDI5IiwidmFsaWRhdGlvbiI6ImFzc2VydChrLm5vbWVTcXVhZHJhID09ICdNaWxhbicpXG5hc3NlcnQoay5zY3VkZXR0aSA-IDApIiwiY29udGV4dCI6IiIsImxhbmciOiJtYXRsYWIifQ\"}",
                            "urlName": "creazione-hh2ng2b3",
                            "gradeAs": "Lab"
                        }
                    ]
                },
                {
                    "name": "Rimozione elementi",
                    "file": "objects/delete.md",
                    "graded": false,
                    "displayName": "Rimozione elementi",
                    "urlName": "rimozione-elementi-h65408hb",
                    "verticals": [
                        {
                            "content": "<h1>Rimozione di un campo</h1>\n<p>Se volessimo rimuovere un campo da una struttura dati, utilizzeremmo la\nfunzione <code>rmfield</code> che ritorna una struttura dati in cui il campo &#xE8;\nstato cancellato:</p>\n<pre><code class=\"language-matlab\">octave:10&#x3E; y = rmfield(x, &#x27;nome&#x27;)\ny =\n\n  scalar structure containing the fields:\n\n    cognome = Zaccaria\n    meseNascita =  7\n    giornoNascita =  10\n\noctave:11&#x3E; x\nx =\n\n  scalar structure containing the fields:\n\n    nome = Vittorio\n    cognome = Zaccaria\n    meseNascita =  7\n    giornoNascita =  10\n\noctave:12&#x3E;\n</code></pre>\n",
                            "type": "normal",
                            "urlName": "rimozione-elementi-m35hq2hh"
                        }
                    ]
                },
                {
                    "name": "Scansione",
                    "file": "objects/enumeration.md",
                    "graded": false,
                    "displayName": "Scansione",
                    "urlName": "scansione-y63rucc7",
                    "verticals": [
                        {
                            "content": "<h1>Scansione degli elementi di una struttura</h1>\n<p>Supponiamo che voglia stampare gli elementi della struttura; posso usare\nun ciclo che scansiona la struttura stessa scomponendo ciascuno dei\ncampi nel nome e valore, interpretando la struttura come una sequenza:</p>\n<pre><code class=\"language-matlab\">struttura.nome = &#x22;Mario&#x22;\nstruttura.cognome = &#x22;Rossi&#x22;\n\nfor [valore, campo] = struttura\n  disp([&#x27;valore del campo &#x27; campo &#x27;: &#x27; valore])\nend\n</code></pre>\n<p>darebbe in output:</p>\n<pre><code class=\"language-matlab\">valore del campo nome: Mario\nvalore del campo cognome: Rossi\n</code></pre>\n<p>La notazione:</p>\n<pre><code class=\"language-matlab\">[valore, campo] = struttura\n</code></pre>\n<p>&#xE8; anche chiamata <em>destructuring</em> poich&#xE8; scompone ciascun elemento in\n<code>valore</code> e <code>campo</code>.</p>\n",
                            "type": "normal",
                            "urlName": "scansione-kgh6v6w1"
                        }
                    ]
                },
                {
                    "name": "Array di strutture",
                    "file": "objects/arrays.md",
                    "graded": false,
                    "displayName": "Array di strutture",
                    "urlName": "array-di-strutture-s702e52i",
                    "verticals": [
                        {
                            "content": "<h1>Vettori di strutture</h1>\n<p>Abbiamo visto che le matrici e i vettori Octave possono mantenere al\nproprio interno solo dati omogenei (ovvero dello stesso tipo). Ad\nesempio, un vettore <code>v</code> definito in questo modo:</p>\n<pre><code class=\"language-matlab\">octave:1&#x3E; v(1) = 3\nv =  3\noctave:2&#x3E; v(2) = 4\nv =\n\n   3   4\n</code></pre>\n<p>potr&#xE0; contenere solo numeri e niente altro.</p>\n<h2>Non solo numeri</h2>\n<p>Riprendiamo la struttura dati contenente i dati di uno studente:</p>\n<pre><code class=\"language-matlab\">x.nome = &#x27;Vittorio&#x27;\nx.cognome = &#x27;Zaccaria&#x27;\nx.meseNascita = 7\nx.giornoNascita = 10\n</code></pre>\n<p>e magari definiamone anche un&#x27;altra, di un altro studente ovviamente:</p>\n<pre><code class=\"language-matlab\">y.nome = &#x27;Anna&#x27;\ny.cognome = &#x27;Rossi&#x27;\ny.meseNascita = 8\ny.giornoNascita = 2\n</code></pre>\n<p>Cosa succede con il seguente assegnamento?</p>\n<pre><code class=\"language-matlab\">studenti(1) = x\nstudenti(2) = y\n</code></pre>\n<p>Octave ci risponder&#xE0; che ha creato un vettore di strutture dati di due\nelementi:</p>\n<pre><code class=\"language-matlab\">studenti =\n\n  1x2 struct array containing the fields:\n\n    nome\n    cognome\n    meseNascita\n    giornoNascita\n</code></pre>\n<p>I due elementi dell&#x27;array <code>studenti</code> sono una copia delle strutture dati\nstudente <code>x</code> e <code>y</code>.</p>\n<h2>Accesso ai dati dell&#x27;array</h2>\n<p>Se volessimo scrivere un programma che stampi i cognomi di tutti gli\nstudenti contenuti nell&#x27;array appena creato, potremmo fare cosi:</p>\n<pre><code class=\"language-matlab\">for s = studenti\n  disp(s.cognome)\nend\n</code></pre>\n<p>oppure, senza un ciclo, sfruttando le funzioni anonime:</p>\n<pre><code class=\"language-matlab\">arrayfun(@(x)disp(x.cognome), studenti)\n</code></pre>\n<p>ottenendo:</p>\n<pre><code class=\"language-matlab\">Zaccaria\nRossi\n</code></pre>\n<h2>Proiezione di un array di strutture su un campo</h2>\n<p>Supponiamo ora di creare un array <code>n</code> solo con il mese di nascita degli\nstudenti:</p>\n<pre><code class=\"language-matlab\">n = [studenti.meseNascita]\n</code></pre>\n<p>Di fatto, <code>[studenti.meseNascita]</code> &#xE8; un modo veloce per dire, &#x22;dammi un\narray dove ogni elemento &#xE8; costituito dal valore del campo <code>meseNascita</code>\nnell&#x27;elemento corrispondente in <code>studenti</code>&#x22;.</p>\n<p>Ovviamente <code>[studenti.meseNascita]</code> e <code>studenti</code> hanno le stesse\ndimensioni.</p>\n<p>Dato l&#x27;array di strutture dati <code>studenti</code>, completare il programma di\nseguito in modo che la variabile <code>n</code> assuma il valore del numero di</p>\n",
                            "type": "normal",
                            "urlName": "array-di-strutture-o53gs7xp"
                        },
                        {
                            "content": "<p>studenti con <code>meseNascita</code> pari a 4 (senza usare cicli):</p>\n",
                            "lang": "matlab",
                            "code": {
                                "base": "studenti(1) = struct(&#39;nome&#39;, &#39;Vittorio&#39;, &#39;cognome&#39;, &#39;Zaccaria&#39;, &#39;meseNascita&#39;, 7)\nstudenti(2) = struct(&#39;nome&#39;, &#39;Marco&#39;, &#39;cognome&#39;, &#39;Rossi&#39;, &#39;meseNascita&#39;, 4)\nstudenti(3) = struct(&#39;nome&#39;, &#39;Giovanna&#39;, &#39;cognome&#39;, &#39;Bianchi&#39;, &#39;meseNascita&#39;, 9)\nstudenti(4) = struct(&#39;nome&#39;, &#39;Pippo&#39;, &#39;cognome&#39;, &#39;Rossi&#39;, &#39;meseNascita&#39;, 4)",
                                "solution": "studenti(1) = struct(&#39;nome&#39;, &#39;Vittorio&#39;, &#39;cognome&#39;, &#39;Zaccaria&#39;, &#39;meseNascita&#39;, 7)\nstudenti(2) = struct(&#39;nome&#39;, &#39;Marco&#39;, &#39;cognome&#39;, &#39;Rossi&#39;, &#39;meseNascita&#39;, 4)\nstudenti(3) = struct(&#39;nome&#39;, &#39;Giovanna&#39;, &#39;cognome&#39;, &#39;Bianchi&#39;, &#39;meseNascita&#39;, 9)\nstudenti(4) = struct(&#39;nome&#39;, &#39;Pippo&#39;, &#39;cognome&#39;, &#39;Rossi&#39;, &#39;meseNascita&#39;, 4)\n\nn = sum([studenti.meseNascita] == 4)",
                                "validation": "assert(n==2)",
                                "context": "",
                                "lang": "matlab"
                            },
                            "type": "exercise",
                            "grader_payload": "{\"payload\":\"eyJiYXNlIjoic3R1ZGVudGkoMSkgPSBzdHJ1Y3QoJ25vbWUnLCAnVml0dG9yaW8nLCAnY29nbm9tZScsICdaYWNjYXJpYScsICdtZXNlTmFzY2l0YScsIDcpXG5zdHVkZW50aSgyKSA9IHN0cnVjdCgnbm9tZScsICdNYXJjbycsICdjb2dub21lJywgJ1Jvc3NpJywgJ21lc2VOYXNjaXRhJywgNClcbnN0dWRlbnRpKDMpID0gc3RydWN0KCdub21lJywgJ0dpb3Zhbm5hJywgJ2NvZ25vbWUnLCAnQmlhbmNoaScsICdtZXNlTmFzY2l0YScsIDkpXG5zdHVkZW50aSg0KSA9IHN0cnVjdCgnbm9tZScsICdQaXBwbycsICdjb2dub21lJywgJ1Jvc3NpJywgJ21lc2VOYXNjaXRhJywgNCkiLCJzb2x1dGlvbiI6InN0dWRlbnRpKDEpID0gc3RydWN0KCdub21lJywgJ1ZpdHRvcmlvJywgJ2NvZ25vbWUnLCAnWmFjY2FyaWEnLCAnbWVzZU5hc2NpdGEnLCA3KVxuc3R1ZGVudGkoMikgPSBzdHJ1Y3QoJ25vbWUnLCAnTWFyY28nLCAnY29nbm9tZScsICdSb3NzaScsICdtZXNlTmFzY2l0YScsIDQpXG5zdHVkZW50aSgzKSA9IHN0cnVjdCgnbm9tZScsICdHaW92YW5uYScsICdjb2dub21lJywgJ0JpYW5jaGknLCAnbWVzZU5hc2NpdGEnLCA5KVxuc3R1ZGVudGkoNCkgPSBzdHJ1Y3QoJ25vbWUnLCAnUGlwcG8nLCAnY29nbm9tZScsICdSb3NzaScsICdtZXNlTmFzY2l0YScsIDQpXG5cbm4gPSBzdW0oW3N0dWRlbnRpLm1lc2VOYXNjaXRhXSA9PSA0KSIsInZhbGlkYXRpb24iOiJhc3NlcnQobj09MikiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}",
                            "urlName": "array-di-strutture-fbtw4dth"
                        }
                    ]
                }
            ],
            "start": "2016 11 12",
            "displayName": "Strutture Dati",
            "urlName": "strutture-dati-7ktob7iw"
        }
    ],
    "originalFiles": {
        "/course.xml": "<course\n url_name=\"{{course.urlName}}\"\n org=\"{{organization.name}}\"\n course=\"{{course.name}}\"\n display_name=\"{{course.displayName}}\"\n\n {% if course.start %} start=\"{{course.start | datejs }}\" {% endif %}\n {% if course.end %} end=\"{{course.end | datejs }}\" {% endif %}\n {% if course.enrollment_start %} enrollment_start=\"{{course.enrollment_start | datejs }}\" {% endif %}\n {% if course.enrollment_end %} enrollment_end=\"{{course.enrollment_end | datejs }}\" {% endif %}\n {% if course.course_image %} course_image=\"{{course.course_image}}\" {% endif %}\n\n >\n\n {% for chapter in chapters %}\n <chapter display_name=\"{{chapter.displayName}}\" url_name=\"{{chapter.urlName}}\"{% if chapter.start %} start='{{chapter.start | datejs }}' {% endif %}>\n   {% for sequential in chapter.sequentials %}\n\n    <sequential display_name=\"{{sequential.displayName}}\" url_name=\"{{sequential.urlName}}\"\n      {% if sequential.start %} start='{{sequential.start | datejs }}' {% endif %}\n      graded=\"{{sequential.graded}}\"\n      {% if sequential.format %} format=\"{{sequential.format}}\" {% endif %}\n    >\n     {% for vertical in sequential.verticals %}\n      {% if vertical.type == 'normal' %}\n      <vertical display_name=\"{{sequential.displayName}} - Step {{forloop.index}}\" url_name=\"{{vertical.urlName}}\">\n        <html display_name=\"{{sequential.displayName}} - Step {{forloop.index}}\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         {{vertical.content}}\n        </html>\n      </vertical>\n      {% endif %}\n\n      {% if vertical.type == 'exercise' %}\n      <vertical display_name=\"{{sequential.displayName}} - Step {{forloop.index}}\" url_name=\"{{vertical.urlName}}\">\n        <problem display_name=\"{{sequential.displayName}} - Step {{forloop.index}}\">\n            <text>\n                {{vertical.content}}\n            </text>\n\n            <coderesponse queuename=\"{{xqueue.name}}\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"{{vertical.lang}}\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>{{vertical.code.base}}</initial_display>\n                    <answer_display>{{vertical.code.solution}}</answer_display>\n                    <grader_payload>\n                      {{vertical.grader_payload}}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      {% endif %}\n      {% if vertical.type == 'quiz' %}\n      <vertical display_name=\"{{sequential.displayName}} - Step {{forloop.index}}\" url_name=\"{{vertical.urlName}}\">\n        <problem display_name=\"{{sequential.displayName}} - Step {{forloop.index}}\">\n          {{vertical.content}}\n          <choiceresponse>\n            <checkboxgroup label=\"\">\n              {% for i in vertical.items %}\n              <choice correct=\"{{i.correct}}\">\n                <text>{{i.text}}</text>\n              </choice>\n              {% endfor %}\n            </checkboxgroup>\n          </choiceresponse>\n          <solution>\n            <div class=\"detailed-solution\">\n              <p>Feedback</p>\n              <p>{{vertical.feedback}}</p>\n            </div>\n          </solution>\n\n        </problem>\n      </vertical>\n      {% endif %}\n     {% endfor %}\n   </sequential>\n\n  {% endfor %}\n  </chapter>\n {% endfor %}\n</course>\n",
        "/about/overview.html": "<section class=\"about\">\n{{info.about | markdown }}\n</section>\n\n<section class=\"prerequisites\">\n{{info.prerequsites | markdown }}\n</section>\n\n<section class=\"course-staff\">\n  <h2>Course Staff</h2>\n{% for staff in info.course-staff %}\n  <article class=\"teacher\">\n    <div class=\"teacher-image\">\n      <img src=\"{{staff.image}}\" align=\"left\" style=\"margin:0 20 px 0\">\n    </div>\n\n    <h3>{{staff.name}}</h3>\n    {{staff.bio | markdown }}\n  </article>\n  {% endfor %}\n</section>\n\n<section class=\"faq\">\n  <section class=\"responses\">\n    <h2>Frequently Asked Questions</h2>\n    {% for q in info.faq %}\n    <article class=\"response\">\n      <h3>{{q.question}}</h3>\n      {{q.answer | markdown }}\n    </article>\n    {% endfor %}\n  </section>\n</section>\n",
        "/about/short_description.html": "{{short-description}}\n"
    },
    "expandedFiles": {
        "/course.xml": "<course\n url_name=\"2016-fall\"\n org=\"polimix\"\n course=\"introduzione-ad-octave\"\n display_name=\"Introduzione ad Octave\"\n\n  start=\"2016-09-30T22:00:00.000Z\" \n  end=\"2017-05-31T22:00:00.000Z\" \n \n \n  course_image=\"intro.png\" \n\n >\n\n \n <chapter display_name=\"Le basi\" url_name=\"le-basi-tmsfdnw6\" start='2016-10-07T22:00:00.000Z' >\n   \n\n    <sequential display_name=\"Le basi\" url_name=\"le-basi-owynqgn5\"\n       start='2016-10-07T22:00:00.000Z' \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Le basi - Step 1\" url_name=\"le-basi-nwqb238j\">\n        <html display_name=\"Le basi - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Le basi della programmazione</h1>\n<p>In questo primo capitolo impareremo le basi della programmazione in\nOctave.</p>\n<p>Programmare significa scrivere; proprio come un libro &#xE8; fatto da\ncapitoli, paragrafi, frasi, parole e lettere, in maniera simile un\nprogramma pu&#xF2; essere spezzato in componenti sempre pi&#xF9; piccole.</p>\n<p>Per il momento la pi&#xF9; importante componente che guarderemo &#xE8; lo\n<strong>statement</strong>. Uno <strong>statement</strong> &#xE8; analogo ad una frase in un libro. Da\nsolo infatti uno statement non ha tanto significato; &#xE8; solo all&#x27;interno\ndi un contesto che assume un rilievo importante.</p>\n<p>Lo statement &#xE8; anche comunemente conosciuto come <strong>linea di codice</strong>;\nquesto &#xE8; perch&#xE9; gli statement tendono a essere scritti in sequenza su\nlinee individuali all&#x27;interno di un file testuale (chiamato <strong>codice\nsorgente</strong>, o programma).</p>\n<p>Una linea di codice &#xE8; quindi una linea del tuo programma.</p>\n<p>Ecco il primo esempio di programma Octave che andremo ad esaminare (solo\ndue righe di codice!):</p>\n<pre><code class=\"language-matlab\">1+1\n2+2\n</code></pre>\n<p>Questo programma deve essere letto dall&#x27;interprete Octave che esegue,\nlinea per linea, le istruzioni che gli abbiamo dato. Abbiamo due\nmodalit&#xE0; per far questo:</p>\n<ol>\n<li>\n<p>Invocare l&#x27;interprete (le modalit&#xE0; cambiano a seconda del sistema\nche state utilizzando, e.g. Windows, Linux, OSX) e digitare\ninterattivamente il programma:</p>\n<pre><code class=\"language-matlab\">octave:1&#x3E; 1+1 &#xAB;INVIO&#xBB;\nans =  2\noctave:2&#x3E; 2+2 &#xAB;INVIO&#xBB;\nans =  4\noctave:3&#x3E;\n</code></pre>\n</li>\n<li>\n<p>Scrivere le istruzioni in un file di testo (ad. es., <code>esempio.m</code>) ed\neseguirlo con l&#x27;interprete (anche qui le modalit&#xE0; cambiano a seconda\ndel sistema che state utilizzando). Otterrete in uscita la stampa a\nvideo seguente:</p>\n<pre><code class=\"language-matlab\">ans =  2\nans =  4\n</code></pre>\n</li>\n</ol>\n<p>In questo corso preferiamo usare la seconda modalit&#xE0; (anche per gli\nesercizi che dovrete risolvere), ma in alcuni casi faremo riferimento\nanche alla prima.</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Commenti\" url_name=\"commenti-tkwelp3m\"\n       start='2016-10-07T22:00:00.000Z' \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Commenti - Step 1\" url_name=\"commenti-t6i9g0e7\">\n        <html display_name=\"Commenti - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Commenti</h1>\n<p>I commenti sono linee di codice che vengono ignorate dall&#x27;interprete. Di\nfatto sono costituite da testo che non viene interpretato ma serve solo\nal programmatore per ricordarsi ci&#xF2; che aveva scritto!</p>\n<p>In Octave i commenti vengono marcati con il simbolo percentuale:</p>\n<pre><code class=\"language-matlab\">% Questo &#xE8; un commento\n1+1\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Commenti - Step 2\" url_name=\"commenti-6wcewg3l\">\n        <problem display_name=\"Commenti - Step 2\">\n            <text>\n                <p>Esercizio: marcami come commento</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>Marcami come commento\n3+3</initial_display>\n                    <answer_display>% Marcami come commento\n3+3</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoiTWFyY2FtaSBjb21lIGNvbW1lbnRvXG4zKzMiLCJzb2x1dGlvbiI6IiUgTWFyY2FtaSBjb21lIGNvbW1lbnRvXG4zKzMiLCJ2YWxpZGF0aW9uIjoiYXNzZXJ0KHRydWUpOyIsImNvbnRleHQiOiIiLCJsYW5nIjoibWF0bGFiIn0\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Variabili\" url_name=\"variabili-4akpp1xr\"\n       start='2016-10-07T22:00:00.000Z' \n      graded=\"true\"\n       format=\"HW\" \n    >\n     \n      \n      <vertical display_name=\"Variabili - Step 1\" url_name=\"variabili-x8c4ekns\">\n        <html display_name=\"Variabili - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Variabili</h1>\n<p>Il primo passo per poter comprendere realmente la programmazione &#xE8;\nconsiderare l&#x27;analogia con l&#x27;algebra che studiavi a scuola. L&#x27;algebra\ndescrive delle espressioni:</p>\n<pre><code>3 + 5 = 8\n</code></pre>\n<p>Se ti ricordi, le espressioni potevano contenere incognite, per esempio\n<code>x</code>:</p>\n<pre><code>3 + x = 8\n</code></pre>\n<p>Potevi determinare il valore della variabile <code>x</code> spostando i termini\nintorno all&#x27;equazione:</p>\n<pre><code>x = 8 - 3\n-&#x3E; x = 5\n</code></pre>\n<p><code>x</code> &#xE8; di fatto un contenitore che contiene il valore 5.</p>\n<h2>Cosa &#xE8; effettivamente una variabile</h2>\n<p>Proprio come nell&#x27;algebra, le variabili di cui si parla in informatica\nsono <strong>contenitori</strong> per valori.</p>\n<p>Questi contenitori sono posti nella memoria del calcolatore. In\ngenerale, potete modificare il contenuto di tali contenitori diverse\nvolte durante l&#x27;esecuzione del vostro programma; l&#x27;unica cosa importante\nda ricordare &#xE8; che quando il calcolatore viene spento, le variabili\nperdono il loro valore.</p>\n<p>Le variabili hanno un <strong>nome</strong> ed un <strong>valore</strong>; i nomi possono essere\nqualsiasi lettera o parola ma ricorda che ci sono delle restrizioni che\nvariano da linguaggio e linguaggio.</p>\n<h2>Come definire una variabile in Octave</h2>\n<p>Quest programma Octave mostra come assegnare un valore ai contenitori\n<code>x</code> ed <code>y</code>, calcolarne la somma ed inserirla nel contenitore <code>result</code>:</p>\n<pre><code class=\"language-matlab\">x = 5;\ny = 6;\nresult = x + y;\n</code></pre>\n<p>Nota bene: il valore corrente di una variabile &#xE8; sempre l&#x27;ultimo che le\n&#xE8; stato assegnato:</p>\n<p>Supponete di avere il seguente programma:</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      \n      <vertical display_name=\"Variabili - Step 2\" url_name=\"variabili-er34qxv7\">\n        <problem display_name=\"Variabili - Step 2\">\n          <ul>\n<li><code>x = 1;</code></li>\n<li><code>x = 3;</code></li>\n<li><code>y = 6;</code></li>\n<li><code>result = x + y;</code></li>\n</ul>\n<p>Quale sar&#xE0; il valore finale di <code>result</code>?</p>\n\n          <choiceresponse>\n            <checkboxgroup label=\"\">\n              \n              <choice correct=\"false\">\n                <text>7</text>\n              </choice>\n              \n              <choice correct=\"false\">\n                <text>Indeterminato</text>\n              </choice>\n              \n              <choice correct=\"true\">\n                <text>9</text>\n              </choice>\n              \n            </checkboxgroup>\n          </choiceresponse>\n          <solution>\n            <div class=\"detailed-solution\">\n              <p>Feedback</p>\n              <p>result = 3 + 6</p>\n            </div>\n          </solution>\n\n        </problem>\n      </vertical>\n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Stampa\" url_name=\"stampa-jtf9s19t\"\n       start='2016-10-07T22:00:00.000Z' \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Stampa - Step 1\" url_name=\"stampa-ft8350t0\">\n        <html display_name=\"Stampa - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Stampa a video</h1>\n<p>Le stringhe, cos&#xED; come ogni altra variabile Octave possono essere\nstampate a video durante l&#x27;esecuzione del programma.</p>\n<p>Ogni qual volta assegnate un valore ad una variabile, senza terminare il\ncomando con un punto e virgola (<code>;</code>), questo provoca la visualizzazione\ndel risultato direttamente a video.</p>\n<p>Se apriamo l&#x27;interprete Octave e digitiamo (&#xAB;INVIO&#xBB; significa\nschiacciare il tasto invio):</p>\n<pre><code class=\"language-matlab\">octave&#x3E; x = 10 &#xAB;INVIO&#xBB;\n</code></pre>\n<p>otterremo:</p>\n<pre><code class=\"language-matlab\">x = 10\n</code></pre>\n<p>Se invece usiamo il <code>;</code>:</p>\n<pre><code class=\"language-matlab\">octave&#x3E; y = 11; &#xAB;INVIO&#xBB;\n</code></pre>\n<p>non verr&#xE0; stampato nulla.</p>\n<h2>La funzione <code>disp</code></h2>\n<p>Ricordarsi di mettere o non mettere i punti e virgola puo&#x27; diventare\nnoioso. In pi&#xF9;, come faremo pi&#xF9; avanti nel corso, non ci &#xE8; permessa\nmolta libert&#xE0; nel decidere cosa stampare.</p>\n<p>Abbiamo quindi bisogno di un modo pi&#xF9; esplicito per stampare le\nvariabili. A questo serve la funzione <code>disp</code>; vediamo un esempio:</p>\n<pre><code class=\"language-matlab\">x = 100\ndisp(&#x27;Il valore di x: &#x27;)\ndisp(x)\n</code></pre>\n<p>Se eseguite il codice sopra in octave otterrete</p>\n<pre><code>Il valore di x:\n100\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Tipi\" url_name=\"tipi-uc6udicx\"\n       start='2016-10-07T22:00:00.000Z' \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Tipi - Step 1\" url_name=\"tipi-w3eej7om\">\n        <html display_name=\"Tipi - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Tipi</h1>\n<p>I computer sono sofisticati e possono fare uso di variabili pi&#xF9;\ncomplesse di semplici numeri, ovvero possono essere di <strong>tipi</strong>\ndifferenti. I tipi pi&#xF9; comuni sono:</p>\n<ul>\n<li>\n<p><strong>Numeri</strong></p>\n<ul>\n<li><strong>Float (virgola mobile)</strong>: 1.21323, 4, -33.5, 100004 oppure\n0.123</li>\n<li><strong>Integer (interi)</strong>: 1, 12, -33, 140 ma non 1.233</li>\n</ul>\n</li>\n<li>\n<p><strong>Stringhe</strong>: come &#x22;elefante&#x22;, &#x22;acqua&#x22;, oppure &#x22;caspita sei alto!&#x22;</p>\n</li>\n<li>\n<p><strong>Booleani</strong>: possono essere <strong>1</strong> (vero) o <strong>0</strong> (falso) ma non di\npi&#xF9;. Vedremo che tutti gli operatori di confronto ritornano\n<em>booleani</em>.</p>\n</li>\n<li>\n<p><strong>Array</strong>: una sequenza di numeri 1,2,3,4,... o altri tipi</p>\n</li>\n<li>\n<p><strong>Strutture dati</strong>: rappresentano un oggetto complessi</p>\n</li>\n</ul>\n<p>In Octave non devi esplicitamente dichiarare il tipo di una variabile.\nDevi semplicemente specificare durante l&#x27;assegnamento qual &#xE8; il valore\nche variabile deve avere; l&#x27;interprete decider&#xE0; automaticamente che tipo\nassegnare quella variabile.</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Tipi - Step 2\" url_name=\"tipi-tyegmgab\">\n        <problem display_name=\"Tipi - Step 2\">\n            <text>\n                <p>Fare in modo che ad <code>a</code> venga assegnato un intero</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>a=</initial_display>\n                    <answer_display>a=1;</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoiYT0iLCJzb2x1dGlvbiI6ImE9MTsiLCJ2YWxpZGF0aW9uIjoiaXNJbnRlZ2VyKGEpIiwiY29udGV4dCI6IiIsImxhbmciOiJtYXRsYWIifQ\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Uguaglianza\" url_name=\"uguaglianza-vcg8snia\"\n       start='2016-10-07T22:00:00.000Z' \n      graded=\"true\"\n       format=\"Lab\" \n    >\n     \n      \n      <vertical display_name=\"Uguaglianza - Step 1\" url_name=\"uguaglianza-qpiepnyg\">\n        <html display_name=\"Uguaglianza - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Test di uguaglianza</h1>\n<p>I programmatori devono frequentemente determinare se due variabili sono\nuguali oppure no. Questo viene fatto attraverso un operatore di\nuguaglianza.</p>\n<p>L&#x27;operatore per determinare l&#x27;uguaglianza di variabili &#xE8; <code>==</code>\n(uguale-uguale). Il valore risultante pu&#xF2; essere <code>1</code> (<strong>vero</strong>) o <code>0</code>\n(<strong>falso</strong>) e, a sua volta, pu&#xF2; essere inserito in un&#x27;altra variabile:</p>\n<pre><code class=\"language-matlab\">a = 1\nb = 1\nc = (a == b)\n</code></pre>\n<p>In questo caso il valore finale della variabile C &#xE8; uguale a <code>1</code>.</p>\n<h2>Altri operatori relazionali</h2>\n<p>L&#x27;operatore <code>==</code> fa parte dell&#x27;insieme pi&#xF9; ampio di <strong>operatori\nrelazionali</strong>, ovvero operatori che permettono di stabilire che\nrelazione hanno due numeri:</p>\n<table>\n<thead>\n<tr>\n<th>Operatore</th>\n<th>Significato</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&#x3C;</code></td>\n<td>Minore di.</td>\n</tr>\n<tr>\n<td><code>&#x3C;=</code></td>\n<td>Minore di o uguale a.</td>\n</tr>\n<tr>\n<td><code>&#x3E;</code></td>\n<td>Maggiore di.</td>\n</tr>\n<tr>\n<td><code>&#x3E;=</code></td>\n<td>Maggiori di o uguale a.</td>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td>Uguale a.</td>\n</tr>\n<tr>\n<td><code>~=</code></td>\n<td>Diverso da.</td>\n</tr>\n</tbody>\n</table>\n<p>Ad esempio, l&#x27;operatore <code>&#x3C;=</code> (minore uguale) &#xE8; tale che il seguente\ncodice:</p>\n<pre><code class=\"language-matlab\">a = 3\nb = 6\nc = (a &#x3C;= b)\n</code></pre>\n<p>assegni a <code>c</code> il valore 1.</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      \n      <vertical display_name=\"Uguaglianza - Step 2\" url_name=\"uguaglianza-hkqqm7rq\">\n        <problem display_name=\"Uguaglianza - Step 2\">\n          <p>Esercizio: Se avessimo usato l&#x27;espressione <code>c = (a ~= b)</code>, quale sarebbe\nstato il valore finale di <code>c</code>?</p>\n\n          <choiceresponse>\n            <checkboxgroup label=\"\">\n              \n              <choice correct=\"false\">\n                <text>0</text>\n              </choice>\n              \n              <choice correct=\"true\">\n                <text>1</text>\n              </choice>\n              \n              <choice correct=\"false\">\n                <text>-1</text>\n              </choice>\n              \n            </checkboxgroup>\n          </choiceresponse>\n          <solution>\n            <div class=\"detailed-solution\">\n              <p>Feedback</p>\n              <p>L'operatore `~=` assegna a `c` il valore 1 solo se `a` e `b` sono diversi.</p>\n            </div>\n          </solution>\n\n        </problem>\n      </vertical>\n      \n     \n   </sequential>\n\n  \n  </chapter>\n \n <chapter display_name=\"Numeri\" url_name=\"numeri-ar9utkjm\" start='2016-10-14T22:00:00.000Z' >\n   \n\n    <sequential display_name=\"Numeri\" url_name=\"numeri-y9tg1lui\"\n       start='2016-10-14T22:00:00.000Z' \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Numeri - Step 1\" url_name=\"numeri-ib5sjcwc\">\n        <html display_name=\"Numeri - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Numeri</h1>\n<p>Octave usa la notazione decimale convenzionale, con un punto per\nseparare la parte intera da quella decimale, ad esempio:</p>\n<pre><code>2, 1.23, &#x2212;324.758\n</code></pre>\n<p>&#xC8; possibile usare anche la notazione <em>scientifica</em> o <em>esponenziale</em> (con\nmantissa ed esponente); ovvero, per specificare una potenza di 10 si\nutilizza la lettera <code>e</code>, ad esempio <code>&#x2212;3 &#xD7; 10^8</code> lo si rappresenta come\n<code>-3e8</code>.</p>\n<h2>Dettagli implementativi</h2>\n<p>Ciascun numero &#xE8; memorizzato in un campo da 64 bit (bit = <strong>binary\ndigit</strong>, unit&#xE0; di informazione elementare).</p>\n<p>Ci&#xF2; corrisponde, in base 10, a circa 16 cifre dopo la virgola. Ad\nesempio il numero <code>1.2345678901234567890</code> verr&#xE0; memorizzato come\n<code>1.2345678901234566</code>.</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Creazione\" url_name=\"creazione-xiks76fh\"\n      \n      graded=\"true\"\n       format=\"Lab\" \n    >\n     \n      \n      <vertical display_name=\"Creazione - Step 1\" url_name=\"creazione-s9ndo72b\">\n        <html display_name=\"Creazione - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Creazione e copia</h1>\n<p>Come hai visto nei capitoli precedenti, puoi creare una variabile\nsemplicemente assegnandole un numero:</p>\n<pre><code class=\"language-matlab\">a = 3\n</code></pre>\n<p>Puoi creare una variabile anche assegnandole il valore di un&#x27;altra\nvariabile come ad esempio:</p>\n<pre><code class=\"language-matlab\">a = 3\nb = a\n</code></pre>\n<p>nell&#x27;esempio precedente la variabile <code>b</code> assume il valore della\nvariabile <code>a</code>, ovvero il valore tre.</p>\n<p>Attenzione: le variabili sono scollegate. Se successivamente assegnamo\nad <code>a</code> un altro valore:</p>\n<pre><code class=\"language-matlab\">a = 5\nb = a\na = 4\n</code></pre>\n<p>la variabile <code>b</code> continuer&#xE0; ad aver valore 3.</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      \n      <vertical display_name=\"Creazione - Step 2\" url_name=\"creazione-hlcmnhq1\">\n        <problem display_name=\"Creazione - Step 2\">\n          <p>Quale valore ha la variabile <code>b</code> dopo questa sequenza di assegnamenti?</p>\n<ul>\n<li><code>a = 5</code></li>\n<li><code>b = a</code></li>\n<li><code>a = 4</code></li>\n</ul>\n\n          <choiceresponse>\n            <checkboxgroup label=\"\">\n              \n              <choice correct=\"true\">\n                <text>5</text>\n              </choice>\n              \n              <choice correct=\"false\">\n                <text>4</text>\n              </choice>\n              \n              <choice correct=\"false\">\n                <text>NA</text>\n              </choice>\n              \n            </checkboxgroup>\n          </choiceresponse>\n          <solution>\n            <div class=\"detailed-solution\">\n              <p>Feedback</p>\n              <p>Dopo che `b` assume il valore tre, non viene più modificata.</p>\n            </div>\n          </solution>\n\n        </problem>\n      </vertical>\n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Operatori di base\" url_name=\"operatori-di-base-ev5l03te\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Operatori di base - Step 1\" url_name=\"operatori-di-base-ogfrlkq7\">\n        <html display_name=\"Operatori di base - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Operatori</h1>\n<p>Possiamo applicare operazioni matematiche ai numeri utilizzando\noperatori base come:</p>\n<ul>\n<li><strong>Addizione</strong>: <code>c = a + b</code></li>\n<li><strong>Sottrazione</strong>: <code>c = a - b</code></li>\n<li><strong>Moltiplicazione</strong>: <code>c = a * b</code></li>\n<li><strong>Divisione</strong>: <code>c = a / b</code></li>\n</ul>\n<p>Possiamo utilizzare le parentesi proprio come in matematica per forzare\nl&#x27;ordine di esecuzione delle operazioni stesse:</p>\n<pre><code class=\"language-matlab\">c = 3/(1+2)\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Operatori di base - Step 2\" url_name=\"operatori-di-base-rgna5u87\">\n        <problem display_name=\"Operatori di base - Step 2\">\n            <text>\n                <p>Crea una variabile <code>x</code> uguale alla somma di <code>a</code> e <code>b</code> diviso <code>c</code> e\nmoltiplicata per <code>d</code>.</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>a = 2034547;\nb = 1.567;\nc = 6758.768;\nd = 45084;\nx =</initial_display>\n                    <answer_display>a = 2034547;\nb = 1.567;\nc = 6758.768;\nd = 45084;\nx = ((a + b) / c) * d;</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoiYSA9IDIwMzQ1NDc7XG5iID0gMS41Njc7XG5jID0gNjc1OC43Njg7XG5kID0gNDUwODQ7XG54ID0iLCJzb2x1dGlvbiI6ImEgPSAyMDM0NTQ3O1xuYiA9IDEuNTY3O1xuYyA9IDY3NTguNzY4O1xuZCA9IDQ1MDg0O1xueCA9ICgoYSArIGIpIC8gYykgKiBkOyIsInZhbGlkYXRpb24iOiJhc3NlcnQoeCA9PSAoKChhICsgYikgLyBjKSAqIGQpKTsiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Operatori avanzati\" url_name=\"operatori-avanzati-r0hw6ycc\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Operatori avanzati - Step 1\" url_name=\"operatori-avanzati-d4w1ng4u\">\n        <html display_name=\"Operatori avanzati - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Operatori matematici avanzati</h1>\n<p>Fra gli operatori matematici avanzati possiamo trovare l&#x27;operatore di\nmodulo ovvero l&#x27;operatore che ci permette di calcolare il resto della\ndivisione per un determinato numero. L&#x27;operatore &#xE8; rappresentato dalla\nparola <code>mod</code>; nell&#x27;espressione seguente calcoliamo il resto della\ndivisione di tre con due e lo inseriamo nella variabile <code>x</code>:</p>\n<pre><code class=\"language-octave\">x = mod(3,2)\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      \n      <vertical display_name=\"Operatori avanzati - Step 2\" url_name=\"operatori-avanzati-y5u6p4hv\">\n        <problem display_name=\"Operatori avanzati - Step 2\">\n          <p>Quanto vale la variabile <code>x</code> dell&#x27;esempio precedente?</p>\n\n          <choiceresponse>\n            <checkboxgroup label=\"\">\n              \n              <choice correct=\"false\">\n                <text>3</text>\n              </choice>\n              \n              <choice correct=\"true\">\n                <text>1</text>\n              </choice>\n              \n              <choice correct=\"false\">\n                <text>2</text>\n              </choice>\n              \n            </checkboxgroup>\n          </choiceresponse>\n          <solution>\n            <div class=\"detailed-solution\">\n              <p>Feedback</p>\n              <p>Il resto di tre diviso due è uno!</p>\n            </div>\n          </solution>\n\n        </problem>\n      </vertical>\n      \n     \n   </sequential>\n\n  \n  </chapter>\n \n <chapter display_name=\"Stringhe\" url_name=\"stringhe-0dyyu4u0\" start='2016-10-21T22:00:00.000Z' >\n   \n\n    <sequential display_name=\"Stringhe\" url_name=\"stringhe-x5uwjveo\"\n       start='2016-10-21T22:00:00.000Z' \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Stringhe - Step 1\" url_name=\"stringhe-snrmdd63\">\n        <html display_name=\"Stringhe - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Stringhe</h1>\n<p>Le stringhe in Octave sono molto simili ad altri linguaggi di\nprogrammazione. Rappresentano dei dati testuali fra due apici <code>&#x27;</code>.</p>\n<p>Un esempio di stringa &#xE8; la seguente:</p>\n<pre><code class=\"language-matlab\">&#x27;hello world&#x27;\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Creazione\" url_name=\"creazione-461e6q03\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Creazione - Step 1\" url_name=\"creazione-aqp6dxym\">\n        <html display_name=\"Creazione - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Creazione</h1>\n<p>Una variabile Octave pu&#xF2; contenere delle stringhe, oltrech&#xE9; numeri; per\ndefinirla basta assegnare la stringa come in questo esempio:</p>\n<pre><code class=\"language-matlab\">a = &#x27;la mia stringa&#x27;;\n</code></pre>\n<p><strong>Note:</strong> Le stringhe non possono essere moltiplicate, sottratte o\ndivise come coi numeri</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Creazione - Step 2\" url_name=\"creazione-okydg533\">\n        <problem display_name=\"Creazione - Step 2\">\n            <text>\n                <p>Crea una variabile <code>str</code> con il valore <code>&#x22;abc&#x22;</code>.</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>% Inserisci qui il tuo codice</initial_display>\n                    <answer_display>str = &#39;abc&#39;;</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoiJSBJbnNlcmlzY2kgcXVpIGlsIHR1byBjb2RpY2UiLCJzb2x1dGlvbiI6InN0ciA9ICdhYmMnOyIsInZhbGlkYXRpb24iOiJhc3NlcnQoc3RyID09ICdhYmMnKTsiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Concatenazione\" url_name=\"concatenazione-gbmiax1e\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Concatenazione - Step 1\" url_name=\"concatenazione-r0pyei6t\">\n        <html display_name=\"Concatenazione - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Concatenazione</h1>\n<p>Quando si parla di concatenazione si intende letteralmente attaccare due\nstringhe insieme per ottenere una stringa unica.</p>\n<p>Supponiamo di voler concatenare le stringhe <code>ciao</code> e <code>mondo</code>; per\nottenere la stringa risultante dobbiamo inserirle in due parentesi\nquadre (quando vedremo gli array questo risulter&#xE0; pi&#xF9; chiaro):</p>\n<pre><code class=\"language-matlab\">[ &#x27;ciao &#x27; &#x27;mondo&#x27;]\n</code></pre>\n<p>Il valore risultante sar&#xE0;:</p>\n<pre><code class=\"language-matlab\">&#x27;ciao mondo&#x27;\n</code></pre>\n<h2>Variabili</h2>\n<p>Ovviamente possiamo fare la stessa cosa anche se le stringhe sono\ncontenute nelle variabili:</p>\n<pre><code class=\"language-matlab\">nome = &#x27;Mario&#x27;\ncognome = &#x27;Rossi&#x27;\nmessaggio = [ nome &#x27; - &#x27; cognome]\n</code></pre>\n<p><code>messaggio</code> conterr&#xE0; dopo l&#x27;ultima istruzione:</p>\n<pre><code class=\"language-matlab\">&#x27;Mario - Rossi&#x27;\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Concatenazione - Step 2\" url_name=\"concatenazione-srwfk05d\">\n        <problem display_name=\"Concatenazione - Step 2\">\n            <text>\n                <p>Per completare il seguente programma, concatenare <code>firstName</code> e\n<code>lastName</code> in modo tale che <code>message</code> contenga <code>Hello John Smith</code>:</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>firstName = &quot;John&quot;;\nlastName = &quot;Smith&quot;;\n\nmessage =</initial_display>\n                    <answer_display>firstName = &quot;John&quot;;\nlastName = &quot;Smith&quot;;\n\nmessage = [ &#39;Hello &#39; firstName &#39; &#39; lastName ]</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoiZmlyc3ROYW1lID0gXCJKb2huXCI7XG5sYXN0TmFtZSA9IFwiU21pdGhcIjtcblxubWVzc2FnZSA9Iiwic29sdXRpb24iOiJmaXJzdE5hbWUgPSBcIkpvaG5cIjtcbmxhc3ROYW1lID0gXCJTbWl0aFwiO1xuXG5tZXNzYWdlID0gWyAnSGVsbG8gJyBmaXJzdE5hbWUgJyAnIGxhc3ROYW1lIF0iLCJ2YWxpZGF0aW9uIjoiYXNzZXJ0KG1lc3NhZ2UgPT0gJ0hlbGxvIEpvaG4gU21pdGgnKTsiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Lunghezza\" url_name=\"lunghezza-m0v0hxaq\"\n      \n      graded=\"true\"\n       format=\"HW\" \n    >\n     \n      \n      <vertical display_name=\"Lunghezza - Step 1\" url_name=\"lunghezza-jwo2be8a\">\n        <html display_name=\"Lunghezza - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Lunghezza</h1>\n<p>Per calcolare la lunghezza di una stringa, dobbiamo ricorrere alla\nfunzione <code>length</code>, ad esempio:</p>\n<pre><code class=\"language-matlab\">length(&#x27;Hello&#x27;)\n</code></pre>\n<p>Se date il comando precedente sulla linea comando di Octave otterrete la\nrisposta (<code>ans</code>) 5:</p>\n<pre><code class=\"language-matlab\">octave:1&#x3E; length(&#x27;Hello&#x27;)\nans =  5\noctave:2&#x3E;\n</code></pre>\n<p>Siccome il risultato &#xE8; un numero, potete assegnarlo ad un&#x27;altra\nvariabile.</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Lunghezza - Step 2\" url_name=\"lunghezza-oqyokxry\">\n        <problem display_name=\"Lunghezza - Step 2\">\n            <text>\n                <p>Assegnate alla variabile <code>size</code> la lunghezza della stringa memorizzata\nin <code>str</code>:</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>str = &#39;Hello World&#39;;\n\nsize =</initial_display>\n                    <answer_display>str = &#39;Hello World&#39;;\n\nsize = length(str);</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoic3RyID0gJ0hlbGxvIFdvcmxkJztcblxuc2l6ZSA9Iiwic29sdXRpb24iOiJzdHIgPSAnSGVsbG8gV29ybGQnO1xuXG5zaXplID0gbGVuZ3RoKHN0cik7IiwidmFsaWRhdGlvbiI6ImFzc2VydChzaXplID09IHN0cik7IiwiY29udGV4dCI6IiIsImxhbmciOiJtYXRsYWIifQ\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Confronto\" url_name=\"confronto-6hs26t1b\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Confronto - Step 1\" url_name=\"confronto-tj1v0row\">\n        <html display_name=\"Confronto - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Confronto fra stringhe</h1>\n<p>Per confrontare due stringhe si usa la funzione matlab <code>strcmp</code>:</p>\n<pre><code class=\"language-matlab\">risultato = strcmp(&#x27;pippo&#x27;, &#x27;pluto&#x27;)\n</code></pre>\n<p>In questo caso, siccome le due stringhe <code>pippo</code> e <code>pluto</code> sono\ndifferenti, il valore finale di <code>risultato</code> &#xE8; 0.</p>\n<p>Nel caso in cui, le stringhe fossero uguali:</p>\n<pre><code class=\"language-matlab\">risultato = strcmp(&#x27;paperino&#x27;, &#x27;paperino&#x27;)\n</code></pre>\n<p>il valore di <code>risultato</code> sarebbe stato 1.</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n  </chapter>\n \n <chapter display_name=\"Logica Condizionale\" url_name=\"logica-condizionale-psfke8al\" start='2016-10-28T22:00:00.000Z' >\n   \n\n    <sequential display_name=\"Logica Condizionale\" url_name=\"logica-condizionale-fllqrk4j\"\n       start='2016-10-28T22:00:00.000Z' \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Logica Condizionale - Step 1\" url_name=\"logica-condizionale-masuoali\">\n        <html display_name=\"Logica Condizionale - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Logica condizionale</h1>\n<p>Una <strong>condizione</strong> serve a testare qualcosa. Le condizioni sono molto\nimportanti nella programmazione, per diversi motivi:</p>\n<ul>\n<li>\n<p>Servono ad assicurare che il tuo programma funzioni,\nindipendentemente dai dati che l&#x27;utente del tuo programma inserisce.\nSe ti fidi di tutti i dati che arriveranno in ingresso al programma,\nquesto probabilmente prima o poi fallir&#xE0;. Se invece verifichi che\nun&#x27;operazione &#xE8; fattibile prima di farla (ovvero il formato dei dati\n&#xE8; corretto e l&#x27;operazione ha senso), allora il tuo programma sar&#xE0;\nmolto pi&#xF9; stabile. Questa precauzione &#xE8; anche <strong>chiamata\nprogrammazione sulla difensiva</strong> per ovvi motivi.</p>\n</li>\n<li>\n<p>Il secondo motivo per cui inserisci delle condizioni nel programma &#xE8;\nper decidere fra due (o pi&#xF9;) modi alternativi di fare i calcoli.\nQueste alternative sono anche chiamati <strong>rami</strong> (o, in inglese,\n&#x22;branches&#x22;) di codice.</p>\n</li>\n</ul>\n<p>In questo capitolo impareremo ad utilizzare le condizioni.</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"If\" url_name=\"if-fm8nswig\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"If - Step 1\" url_name=\"if-ixtatuu5\">\n        <html display_name=\"If - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>La condizione &#x27;if&#x27;</h1>\n<p>La pi&#xF9; semplice condizione che possiamo inserire in un programma Octave\n&#xE8; la condizione &#x27;<code>if</code>:</p>\n<pre><code class=\"language-matlab\">if mod(3,2) == 1\n  disp(&#x27;Il numero 3 &#xE8; dispari&#x27;)\nend\n</code></pre>\n<p>La condizione <code>if</code> pi&#xF9; semplice &#xE8; nella forma:</p>\n<pre><code>if &#xAB;ESP&#xBB;\n    &#xAB;COMANDI&#xBB;\nend\n</code></pre>\n<p>Per poter eseguire <code>&#xAB;COMANDI&#xBB;</code> l&#x27;espressione <code>&#xAB;ESP&#xBB;</code> deve essere uguale\na 1 (o anche maggiore). <strong>Se <code>&#xAB;ESP&#xBB;</code> risulta uguale a 0, i <code>&#xAB;COMANDI&#xBB;</code>\nnon vengono eseguiti!</strong></p>\n<h2>Condizioni <code>if</code> con stringhe</h2>\n<p>La funzione <code>strcmp</code> confronta due stringhe e vale 1 quando sono uguali,\n0 altrimenti; questo significa che possiamo usarla nelle condizioni <code>if</code>\nper confrontare stringhe, quasi come se fossero numeri:</p>\n<pre><code class=\"language-matlab\">nazione = &#x27;Francia&#x27;\n\nif strcmp(nazione, &#x27;Inghilterra&#x27;)\n  tempo = &#x27;orribile&#x27;\n  cibo = &#x27;riempie molto&#x27;\n  moneta = &#x27;il british pound&#x27;\nend\n\nif strcmp(nazione, &#x27;Francia&#x27;)\n  tempo = &#x27;bello&#x27;\n  cibo = &#x27;&#xE8; buono ma poco vegetariano&#x27;\n  moneta = &#x27;Euro&#x27;\nend\n\nmessaggio = [ &#x27;Questa &#xE8; la &#x27; nazione &#x27;, il tempo &#xE8; &#x27; tempo &#x27;, il cibo &#x27; cibo &#x27; e la moneta &#xE8; &#x27; moneta &#x27;.&#x27;]\n\n\ndisp(messaggio)\n</code></pre>\n<p>Come abbiamo visto precedentemente le istruzioni di questo programma\nsono eseguite, dal calcolatore in sequenza. C&#x27;&#xE8; per&#xF2; una particolarit&#xE0;.\nDopo aver assegnato il valore <code>Francia</code> alla variabile <code>nazione</code> (riga\n1), il calcolatore incontra <code>if strcmp(nazione, &#x27;Inghilterra&#x27;)</code>.\nL&#x27;effetto &#xE8; che gli assegnamenti che si trovano entro il primo <code>end</code>:</p>\n<pre><code class=\"language-matlab\">tempo = &#x27;orribile&#x27;\ncibo = &#x27;riempie molto&#x27;\nmoneta = &#x27;il british pound&#x27;\n</code></pre>\n<p>verranno non effettuati, poich&#xE8;, in questo caso, <code>nazione</code> &#xE8; diverso da\n<code>Inghilterra</code>.</p>\n<p>Quando il calcolatore incontra il secondo <code>if</code> (subito dopo aver saltato\nil primo), gli assegnamenti compresi entro il primo <code>end</code>:</p>\n<pre><code class=\"language-matlab\">tempo = &#x27;bello&#x27;\ncibo = &#x27;&#xE8; buono ma poco vegetariano&#x27;\nmoneta = &#x27;Euro&#x27;\n</code></pre>\n<p>vengono effettivamente eseguiti.</p>\n<p>Il <code>messaggio</code> stampato sar&#xE0; quindi:</p>\n<pre><code>Questa &#xE8; la Francia, il tempo &#xE8; bello, il cibo &#xE8; buono ma poco vegetariano e la moneta &#xE8; Euro.\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"If - Step 2\" url_name=\"if-lxkhl79r\">\n        <problem display_name=\"If - Step 2\">\n            <text>\n                <p>Completare il programma qui sotto in modo tale che stampi la stringa\n<code>il numero &#xE8; dispari</code>:</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>numero =\n\nif (mod(numero,2) ~= 0)\n  disp(&#39;il numero è dispari&#39;)\nend\n\nif (mod(numero,2) == 0)\n  disp(&#39;il numero è pari&#39;)\nend</initial_display>\n                    <answer_display>numero =1\n\nif (mod(numero,2) ~= 0)\n  disp(&#39;il numero è dispari&#39;)\nend\n\nif (mod(numero,2) == 0)\n  disp(&#39;il numero è pari&#39;)\nend</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoibnVtZXJvID1cblxuaWYgKG1vZChudW1lcm8sMikgfj0gMClcbiAgZGlzcCgnaWwgbnVtZXJvIMOoIGRpc3BhcmknKVxuZW5kXG5cbmlmIChtb2QobnVtZXJvLDIpID09IDApXG4gIGRpc3AoJ2lsIG51bWVybyDDqCBwYXJpJylcbmVuZCIsInNvbHV0aW9uIjoibnVtZXJvID0xXG5cbmlmIChtb2QobnVtZXJvLDIpIH49IDApXG4gIGRpc3AoJ2lsIG51bWVybyDDqCBkaXNwYXJpJylcbmVuZFxuXG5pZiAobW9kKG51bWVybywyKSA9PSAwKVxuICBkaXNwKCdpbCBudW1lcm8gw6ggcGFyaScpXG5lbmQiLCJ2YWxpZGF0aW9uIjoiYXNzZXJ0KG1vZChudW1lcm8sMikpOyIsImNvbnRleHQiOiIiLCJsYW5nIjoibWF0bGFiIn0\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Else\" url_name=\"else-o8t4l0dw\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Else - Step 1\" url_name=\"else-ei6xq84q\">\n        <html display_name=\"Else - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Else</h1>\n<p>Alle volte avete bisogno di specificare le azioni da effettuare sia nel\ncaso in cui una condizione sia vera, sia che sia falsa:</p>\n<pre><code class=\"language-matlab\">if strcmp(nazione, &#x27;Inghilterra&#x27;)\n  ombrelloObbligatorio = &#x22;si&#x22;\nelse\n  ombrelloObbligatorio = &#x22;no&#x22;\nend\n</code></pre>\n<h2>Condizioni innestate</h2>\n<p>Potete avere condizioni innestate l&#x27;una nell&#x27;altra, per raffinare e\naumentare la scelta delle azioni alternative; ad esempio:</p>\n<pre><code class=\"language-matlab\">if strcmp(nazione, &#x27;Inghilterra&#x27;)\n  ombrelloObbligatorio = &#x22;si&#x22;\nelse\n  if strcmp(nazione, &#x22;Germania&#x22;)\n    ombrelloObbligatorio = &#x22;forse&#x22;\n  else\n    ombrelloObbligatorio = &#x22;no&#x22;\n  end\nend\n</code></pre>\n<p>Completare l&#x27;assegnamento a <code>nome</code> per fare in modo che venga stampata\nla stringa &#x27;Ciao Aaron&#x27;</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Composizione\" url_name=\"composizione-eh87wcrj\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Composizione - Step 1\" url_name=\"composizione-cqc9wcr2\">\n        <html display_name=\"Composizione - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Condizioni complesse</h1>\n<p>Se la nostra condizione &#xE8; composta da pi&#xF9; condizioni semplici, possiamo\nconcatenarle con gli <strong>operatori logici</strong> &#xAB;AND&#xBB; e &#xAB;OR&#xBB;, definite solo\nper i tipi booleani.</p>\n<p>Supponete che vogliate effettuare qualche calcolo solo se una variabile\n(<code>x</code>) &#xE8; compresa fra 10 e 20; formalmente la vostra condizione sar&#xE0;\ncomposta da due condizioni in &#xAB;AND&#xBB; logico:</p>\n<pre><code>x &#xAB;MAGGIORE DI&#xBB; 10 &#xAB;AND&#xBB; x &#xAB;MINORE DI&#xBB; 20\n</code></pre>\n<p>In Matlab traduciamo &#xAB;AND&#xBB; con l&#x27;operatore <code>&#x26;&#x26;</code>:</p>\n<pre><code class=\"language-matlab\">if (x &#x3E; 10 &#x26;&#x26; x &#x3C; 20)\n...\nend\n</code></pre>\n<p>Se invece voleste essere sicuri che <code>nazione</code> sia &#x27;Inghilterra&#x27;\n<strong>oppure</strong> &#x27;Germania&#x27;, usate l&#x27;operatore &#xAB;OR&#xBB; <code>||</code>:</p>\n<pre><code class=\"language-matlab\">if strcmp(nazione, &#x27;Inghilterra&#x27;) || strcmp(nazione, &#x27;Germania&#x27;)\n...\nend\n</code></pre>\n<p><strong>Nota</strong>: Proprio come le operazioni sui numeri, potete raggruppare le\ncondizioni fra parentesi per forzare la precedenza, poich&#xE9; &#xAB;AND&#xBB; ha\nsempre precedenza su &#xAB;OR&#xBB;:</p>\n<pre><code class=\"language-matlab\">if (x==1 || x==3) &#x26;&#x26; (y==2)\n...\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Composizione - Step 2\" url_name=\"composizione-qgut5erg\">\n        <problem display_name=\"Composizione - Step 2\">\n            <text>\n                <p>Riempi la condizione qui sotto in modo tale che venga assegnato\n<code>John di Inghilterra</code> a categoria solo se <code>nome</code> &#xE8; &#x27;John&#x27; <code>nazione</code> &#xE8;\nInghilterra.</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>nome = &quot;John&quot;;\nnazione = &quot;Inghilterra&quot;;\ncategoria = &quot;Boh&quot;\n\nif % riempi qui\n    categoria = &quot;John di Inghilterra&quot;\nend</initial_display>\n                    <answer_display>nome = &quot;John&quot;;\nnazione = &quot;Inghilterra&quot;;\ncategoria = &quot;Boh&quot;\n\nif strcmp(nome, &#39;John&#39;) &amp;&amp; strcmp(nazione, &#39;Inghilterra&#39;)\n    categoria = &quot;John di Inghilterra&quot;\nend</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoibm9tZSA9IFwiSm9oblwiO1xubmF6aW9uZSA9IFwiSW5naGlsdGVycmFcIjtcbmNhdGVnb3JpYSA9IFwiQm9oXCJcblxuaWYgJSByaWVtcGkgcXVpXG4gICAgY2F0ZWdvcmlhID0gXCJKb2huIGRpIEluZ2hpbHRlcnJhXCJcbmVuZCIsInNvbHV0aW9uIjoibm9tZSA9IFwiSm9oblwiO1xubmF6aW9uZSA9IFwiSW5naGlsdGVycmFcIjtcbmNhdGVnb3JpYSA9IFwiQm9oXCJcblxuaWYgc3RyY21wKG5vbWUsICdKb2huJykgJiYgc3RyY21wKG5hemlvbmUsICdJbmdoaWx0ZXJyYScpXG4gICAgY2F0ZWdvcmlhID0gXCJKb2huIGRpIEluZ2hpbHRlcnJhXCJcbmVuZCIsInZhbGlkYXRpb24iOiJhc3NlcnQoc3RyY21wKGNhdGVnb3JpYSxcIkpvaG4gZGkgSW5naGlsdGVycmFcIikpOyIsImNvbnRleHQiOiIiLCJsYW5nIjoibWF0bGFiIn0\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n  </chapter>\n \n <chapter display_name=\"Funzioni\" url_name=\"funzioni-2osl2sxs\" start='2016-11-04T23:00:00.000Z' >\n   \n\n    <sequential display_name=\"Funzioni\" url_name=\"funzioni-qn6485hu\"\n       start='2016-11-04T23:00:00.000Z' \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Funzioni - Step 1\" url_name=\"funzioni-djmellf5\">\n        <html display_name=\"Funzioni - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Le funzioni</h1>\n<p>Le funzioni sono uno dei concetti pi&#xF9; importanti nella programmazione e\nsono presenti praticamente in ogni linguaggio di programmazione.</p>\n<p>Vediamo il problema che le funzioni risolvono.</p>\n<p>Supponete di voler elevare al cubo un numero, diciamo <code>4</code>, in Octave;\ndescrivereste il seguente programma:</p>\n<pre><code class=\"language-matlab\">&#x3E; 4*4*4\n</code></pre>\n<p>Se voleste calcolare il cubo non solo di <code>4</code> ma anche di <code>12</code>:</p>\n<pre><code class=\"language-matlab\">&#x3E; 4*4*4  \n&#x3E; 12*12*12\n</code></pre>\n<p>Se doveste calcolare i cubi di un insieme pi&#xF9; grande di numeri, risulta\nchiaro che si tratta di aggiungere tante righe quanti sono i numeri di\ncui volete calcolare il cubo; ogni riga moltiplicherebbe il numero per\nse stesso due volte. Riusciamo a effettuare gli stessi calcoli evitando\ndi specificare ad ogni riga come si eleva al cubo un numero?</p>\n<p>La risposta &#xE8; si, utilizzando una funzione:</p>\n<pre><code class=\"language-matlab\">function r = cubo(a)\n  r = a*a*a\nend\n\ncubo(4)\ncubo(12)\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Dichiarazione\" url_name=\"dichiarazione-obp74n64\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Dichiarazione - Step 1\" url_name=\"dichiarazione-i38eb08q\">\n        <html display_name=\"Dichiarazione - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Dichiarare una funzione</h1>\n<p>Cosa significa effettivamente la prima parte del programma precedente?</p>\n<pre><code class=\"language-matlab\">function r = cubo(a)\n  r = a*a*a\nend\n</code></pre>\n<p>E&#x27; la descrizione di come elevare al cubo qualsiasi numero: possiamo\nleggerla in questo modo:</p>\n<blockquote>\n<p>Per elevare al <strong><code>cubo</code></strong> il numero <strong><code>a</code></strong>, il risultato <strong><code>r</code></strong> deve\nessere calcolato come <strong><code>a &#xD7; a &#xD7; a</code></strong></p>\n</blockquote>\n<p>La descrizione del metodo &#xE8; chiamata <strong>dichiarazione di funzione</strong>. Le\nlinee di codice tra <code>function</code> ed <code>end</code> sono chiamate <strong>corpo della\nfunzione</strong> e possono essere anche una sequenza complessa (contenente\ncondizioni, cicli e quant&#x27;altro).</p>\n<p>Due nozioni da sapere:</p>\n<ul>\n<li>\n<p>la variabile <code>a</code> &#xE8; chiamata <strong>parametro formale in ingresso</strong>, o\nanche semplicemente <strong>parametro in ingresso</strong>.</p>\n</li>\n<li>\n<p>La variabile <code>r</code> &#xE8; chiamata <strong>valore di ritorno</strong> della funzione.</p>\n</li>\n</ul>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Dichiarazione - Step 2\" url_name=\"dichiarazione-arwlpg0o\">\n        <problem display_name=\"Dichiarazione - Step 2\">\n            <text>\n                <p>Modificare la funzione <code>cubo</code> in modo tale che ritorni <code>1</code> <strong>se e solo\nse</strong> il valore di <code>a</code> &#xE8; maggiore di <code>4</code>, altrimenti si comporta come\nquella gi&#xE0; definita. Nota: Ricordare che le linee di codice tra\n<code>function</code> ed <code>end</code> possono essere anche una sequenza complessa\n(contenente condizioni, cicli e quant&#x27;altro).</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>function r = cubo(a)\n  r = a*a*a\nend</initial_display>\n                    <answer_display>function r = cubo(a)\n  if a &gt; 4\n    r = 1\n  else\n    r = a*a*a\n  end\nend</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoiZnVuY3Rpb24gciA9IGN1Ym8oYSlcbiAgciA9IGEqYSphXG5lbmQiLCJzb2x1dGlvbiI6ImZ1bmN0aW9uIHIgPSBjdWJvKGEpXG4gIGlmIGEgPiA0XG4gICAgciA9IDFcbiAgZWxzZVxuICAgIHIgPSBhKmEqYVxuICBlbmRcbmVuZCIsInZhbGlkYXRpb24iOiJhc3NlcnQoY3VibygzKSA9PSA5KVxuYXNzZXJ0KGN1Ym8oNCkgPT0gMSkiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Utilizzo\" url_name=\"utilizzo-ue0uteje\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Utilizzo - Step 1\" url_name=\"utilizzo-3nc514g4\">\n        <html display_name=\"Utilizzo - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Invocare una funzione</h1>\n<p>Dichiarare il metodo da usare per elevare al cubo un numero non ha molto\nsenso se non lo si usa. Per <strong>usare</strong> il metodo appena definito, bisogna\ninvocarlo:</p>\n<pre><code class=\"language-matlab\">...\ncubo(4)\ncubo(12)\n</code></pre>\n<p>Ciascuna delle due invocazioni di cui sopra ha come effetto di produrre\nil cubo di un numero sfruttando il metodo predefinito. Pi&#xF9; o meno il\ncomando <code>cubo(4)</code> dice:</p>\n<blockquote>\n<p>Segui il metodo con nome <code>cubo</code> ipotizzando che <code>a</code> sia uguale a <code>4</code></p>\n</blockquote>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Invocazioni innestate\" url_name=\"invocazioni-innestate-v8e9s2mh\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Invocazioni innestate - Step 1\" url_name=\"invocazioni-innestate-bnjql3ba\">\n        <html display_name=\"Invocazioni innestate - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Invocazione innestata di funzioni</h1>\n<p>Ricapitolando ci&#xF2; che abbiamo visto fin&#x27;ora:</p>\n<ul>\n<li>\n<p>Scrivere una funzione significa scrivere il metodo per risolvere un\nproblema a partire da un insieme di dati iniziali generici.</p>\n</li>\n<li>\n<p>Invocare una funzione significa risolvere il problema per dati\nspecifici.</p>\n</li>\n</ul>\n<p>Bench&#xE9; sia possibile risolvere un problema grosso all&#x27;interno di una\nsingola funzione, in informatica si cerca il pi&#xF9; possibile di\nriutilizzare funzioni gi&#xE0; esistenti.</p>\n<p>Supponiamo di voler descrivere il metodo per calcolare la distanza di un\npunto di coordinate <code>(x,y)</code> dal centro del piano cartesiano con una\nfunzione Octave:</p>\n<pre><code class=\"language-matlab\">function d = calcolaDistanza(x,y)\n  ...\nend\n</code></pre>\n<p>Un approccio per completare la funzione &#xE8; quello di descrivere nei\nminimi dettagli la soluzione del problema utilizzando solo gli operatori\nbase dell&#x27;aritmetica (<code>*</code>, <code>+</code>, <code>-</code>, <code>/</code>) e qualche ciclo iterativo.</p>\n<p>L&#x27;approccio &#xE8; legittimo ma ci porterebbe a descrivere una funzione molto\nlunga e, con molta probabilit&#xE0;, contenente errori.</p>\n<p>Un secondo approccio &#xE8; quello di sfruttare una funzione gi&#xE0; scritta\ndagli sviluppatori di Octave per elevare a potenza dei numeri: <code>power</code>\n<a href=\"https://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html#XREFpower\">(manuale)</a>.</p>\n<p>Seguendo questo approccio, possiamo scrivere la funzione\n<code>calcolaDistanza</code> utilizzando il <a href=\"http://it.wikipedia.org/wiki/Teorema_di_Pitagora\">teorema di\nPitagora</a>:</p>\n<pre><code class=\"language-matlab\">function d = calcolaDistanza(x,y)\n  d = pow(pow(x,2)+pow(y,2), 1/2)\nend\n</code></pre>\n<p>Octave ha un insieme enorme di <a href=\"http://octave.sourceforge.net/octave/overview.html\">funzioni gi&#xE0;\nscritte</a>. Prima di\niniziare a scrivere una vostra funzione, cercate di capire se pu&#xF2; essere\nscritta sfruttando funzioni gi&#xE0; esistenti.</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Invocazioni innestate - Step 2\" url_name=\"invocazioni-innestate-7y8oos0r\">\n        <problem display_name=\"Invocazioni innestate - Step 2\">\n            <text>\n                <p>Scrivere una funzione che calcola la distanza di un punto\ntridimensionale dal centro degli assi:</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>function d = calcolaDistanza(x,y,z)\n\nend</initial_display>\n                    <answer_display>function d = calcolaDistanza(x,y,z)\n  d = pow(pow(x,2)+pow(y,2)+pow(z,2), 1/2)\nend</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoiZnVuY3Rpb24gZCA9IGNhbGNvbGFEaXN0YW56YSh4LHkseilcblxuZW5kIiwic29sdXRpb24iOiJmdW5jdGlvbiBkID0gY2FsY29sYURpc3RhbnphKHgseSx6KVxuICBkID0gcG93KHBvdyh4LDIpK3Bvdyh5LDIpK3Bvdyh6LDIpLCAxLzIpXG5lbmQiLCJ2YWxpZGF0aW9uIjoiYXNzZXJ0KGNhbGNvbGFEaXN0YW56YSgxLDAsMSkgLSAxIDwgZXBzaWxvbikiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Ricorsione\" url_name=\"ricorsione-55lkd4l9\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Ricorsione - Step 1\" url_name=\"ricorsione-qmsdjr50\">\n        <html display_name=\"Ricorsione - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Ricorsione</h1>\n<p>Supponiamo di voler scrivere il metodo per calcolare <a href=\"http://it.wikipedia.org/wiki/Fattoriale\">il fattoriale di\nun numero</a>.</p>\n<pre><code class=\"language-matlab\">function f = fattoriale(n)\n...\nend\n</code></pre>\n<p>Prima di accingerci a farlo, vediamo alcuni esempi per qualche numero:</p>\n<ul>\n<li>fattoriale di 1 = 1</li>\n<li>fattoriale di 2 = 2 * 1</li>\n<li>fattoriale di 3 = 3 * 2 * 1</li>\n<li>fattoriale di 4 = 4 * 3 * 2 * 1</li>\n<li>e cos&#xEC; via..</li>\n</ul>\n<p>Ci accorgiamo subito di una <strong>regolarit&#xE0; del metodo</strong>, ovvero che, a\nparte il fattoriale di 1:</p>\n<ul>\n<li>fattoriale di 2 = 2 * fattoriale di 1</li>\n<li>fattoriale di 3 = 3 * fattoriale di 2</li>\n<li>fattoriale di 4 = 4 * fattoriale di 3</li>\n<li>e cos&#xEC; via..</li>\n</ul>\n<p>Possiamo dire che il metodo generale per calcolare il fattoriale di <code>n</code>\n&#xE8;, per <code>n</code> diverso da 1:</p>\n<ul>\n<li>fattoriale di n = n * fattoriale di (n-1)</li>\n</ul>\n<p>Il caso particolare di <code>n=1</code> &#xE8; detto <strong>caso base</strong>, ovvero l&#x27;unico\nvalore di <code>n</code> per cui non vale la definizione appena data.</p>\n<p>Siccome la definizione della funzione <code>fattoriale</code> ricorre a se stessa\nper risolvere il problema, viene detta\n<a href=\"http://it.wikipedia.org/wiki/Funzione_ricorsiva\"><strong>ricorsiva</strong></a>.</p>\n<h2>Ricorsione in Octave</h2>\n<p>Octave ci permette di descrivere soluzioni ricorsive in maniera\nabbastanza intuitiva. Dobbiamo stare solo attenti a capire quando\nbisogna applicare la regola ricorsiva e quando, invece, dobbiamo\napplicare il caso base. La definizione ricorsiva del fattoriale in\nOctave &#xE8; la seguente:</p>\n<pre><code class=\"language-matlab\">function f = fattoriale(n)\n  if n == 1\n    f = 1\n  else\n    f = n * fattoriale(n-1)\nend\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Ricorsione - Step 2\" url_name=\"ricorsione-e0velcmw\">\n        <problem display_name=\"Ricorsione - Step 2\">\n            <text>\n                <p>Scrivere una funzione ricorsiva <code>somma(n)</code> che effettua la somma di\ntutti i numeri da <code>1</code> ad <code>n</code>:</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>function r = somma(a)\n\nend</initial_display>\n                    <answer_display>function r = somma(n)\n  if n == 1\n    r = 1\n  else\n    r = n + somma(n-1)\nend</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoiZnVuY3Rpb24gciA9IHNvbW1hKGEpXG5cbmVuZCIsInNvbHV0aW9uIjoiZnVuY3Rpb24gciA9IHNvbW1hKG4pXG4gIGlmIG4gPT0gMVxuICAgIHIgPSAxXG4gIGVsc2VcbiAgICByID0gbiArIHNvbW1hKG4tMSlcbmVuZCIsInZhbGlkYXRpb24iOiJhc3NlcnQoc29tbWEoNSkgPT0gMTUpIiwiY29udGV4dCI6IiIsImxhbmciOiJtYXRsYWIifQ\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Funzioni di ordine superiore\" url_name=\"funzioni-di-ordine-superiore-ejmiy332\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Funzioni di ordine superiore - Step 1\" url_name=\"funzioni-di-ordine-superiore-e41synf7\">\n        <html display_name=\"Funzioni di ordine superiore - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Funzioni di ordine superiore</h1>\n<p><a href=\"http://it.wikipedia.org/wiki/Funzione_di_ordine_superiore\">Da\nwikipedia</a>:\nUna funzione di <strong>ordine superiore</strong> &#xE8; una funzione che pu&#xF2; prendere\naltre funzioni come parametri e/o restituire funzioni come risultato.\nL&#x27;operatore differenziale in matematica &#xE8; un esempio di funzione di\nordine superiore.</p>\n<p>Le funzioni di ordine superiore sono quindi funzioni che manipolano\naltre funzioni.</p>\n<h2>Prologo: variabili che sono sinonimi di funzioni</h2>\n<p>Prima di introdurre le funzioni di ordine superiore, diamo un&#x27;occhiata a\ncosa significa assegnare una funzione ad una variabile.</p>\n<p>Ricordiamo innanzitutto che una variabile &#xE8; un contenitore. Possiamo\ninserire al suo interno valori di vario tipo (numeri, vettori, matrici e\ncos&#xEC; via). Octave permette di fare una cosa in pi&#xF9;; possiamo anche\ninserire una <strong>funzione</strong> in una variabile. Ecco il codice che assegna\nla funzione <code>incrementa</code> alla variabile <code>a</code>:</p>\n<pre><code class=\"language-matlab\">% &#x60;incrementa&#x60;:\nfunction [y] = incrementa(x)\n  y = x+1;\nend\n\na = @incrementa\n</code></pre>\n<p>Attenzione: non &#xE8; una invocazione! Stiamo semplicemente <strong>creando un\nsinonimo</strong> per funzione <code>incrementa</code> che si chiama <code>a</code>.</p>\n<p>Possiamo invocare <code>a</code> proprio come <code>incrementa</code>:</p>\n<pre><code class=\"language-matlab\">a = @incrementa\noctave:5&#x3E; a(1)\nans =  2\n</code></pre>\n<h2>Esempio di funzione superiore</h2>\n<p>Il seguente codice mostra come creare una funzione di ordine superiore\nche applica una funzione passata come parametro ad un vettore in\ningresso:</p>\n<pre><code class=\"language-matlab\">% &#x60;applica&#x60;: applica la funzione &#x60;a&#x60; a tutti gli elementi\n% del vettore &#x60;v&#x60; e ritorna v1\nfunction [v1] = applica(a, v)\n  v1 = [];\n  for i = 1:length(v)\n    v1 = [v1 a(v(i))];\n  end\nend\n</code></pre>\n<p>Possiamo invocare la funzione applica con il sinonimo di <code>incrementa</code>\nper aggiungere 1 a tutti gli elementi di un vettore:</p>\n<pre><code class=\"language-matlab\">octave:7&#x3E; v = [3 4 8]\nv =\n\n   3   4   8\n\noctave:8&#x3E;\noctave:8&#x3E; v1 = applica(@incrementa, v)\nv1 =\n\n   4   5   9\n</code></pre>\n<p>La funzione applica &#xE8; di utilizzo cos&#xEC; comune in Octave che &#xE8; stata\ninserita direttamente nel linguaggio sotto il nome di <code>arrayfun</code>:</p>\n<pre><code class=\"language-matlab\">octave&#x3E; help arrayfun\n  -- Function File:  arrayfun (FUNC, A)\n     ...\n     Execute a function on each element of an array.  This is useful for\n     functions that do not accept array arguments.  If the function does\n     accept array arguments it is better to call the function directly.\n</code></pre>\n<h2>Funzioni anonime</h2>\n<p>Possiamo definire in maniera molto veloce dei sinonimi di funzioni,\naddirittura senza che queste abbiano un nome predefinito (funzioni\nanonime). Qui di seguito, ad esempio, <code>b</code> diventa il sinonimo di una\nfunzione che riceve il valore <code>x</code> e ritorna <code>x-1</code>:</p>\n<pre><code class=\"language-matlab\">b = @(x) x - 1\n</code></pre>\n<p>Utilizzare <code>arrayfun</code> per effettuare manipolazioni di vettore diventa\nancora pi&#xF9; semplice; ad esempio, in questa sessione usiamo <code>arrayfun</code>\nper decrementare gli elementi del vettore:</p>\n<pre><code class=\"language-matlab\">octave:9&#x3E; v2 = arrayfun(v, @(x)x-1)\nv2 =\n\n   2   3   7\n</code></pre>\n<p>Completare la funzione di ordine superiore <code>filtra</code> che riceve un\nvettore <code>v</code> ed una funzione <code>p(x)</code> che ritorna 0 oppure 1. <code>filtra</code></p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Funzioni di ordine superiore - Step 2\" url_name=\"funzioni-di-ordine-superiore-nko8nust\">\n        <problem display_name=\"Funzioni di ordine superiore - Step 2\">\n            <text>\n                <p>ritorna un vettore i cui elementi <code>e</code> sono gli elementi di <code>v</code> per cui\n<code>p(e)</code> ha ritornato 1.</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>function v1 = filtra(p, v)\n  v1 = []\n  for x=1:size(v,2)\n\n\n\n\n  end\nend\n\nris = filtra(@(x) x&gt;1, [1,2,3])</initial_display>\n                    <answer_display>function v1 = filtra(p, v)\n  v1 = []\n  for x=1:size(v,2)\n    x\n    if(p(v(x)))\n      v1 = [v1 v(x)]\n    end\n  end\nend\n\nris = filtra(@(x) x&gt;1, [1,2,3])</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoiZnVuY3Rpb24gdjEgPSBmaWx0cmEocCwgdilcbiAgdjEgPSBbXVxuICBmb3IgeD0xOnNpemUodiwyKVxuXG5cblxuXG4gIGVuZFxuZW5kXG5cbnJpcyA9IGZpbHRyYShAKHgpIHg-MSwgWzEsMiwzXSkiLCJzb2x1dGlvbiI6ImZ1bmN0aW9uIHYxID0gZmlsdHJhKHAsIHYpXG4gIHYxID0gW11cbiAgZm9yIHg9MTpzaXplKHYsMilcbiAgICB4XG4gICAgaWYocCh2KHgpKSlcbiAgICAgIHYxID0gW3YxIHYoeCldXG4gICAgZW5kXG4gIGVuZFxuZW5kXG5cbnJpcyA9IGZpbHRyYShAKHgpIHg-MSwgWzEsMiwzXSkiLCJ2YWxpZGF0aW9uIjoiYXNzZXJ0KHJpcyA9PSBbMiwgM10pIiwiY29udGV4dCI6IiIsImxhbmciOiJtYXRsYWIifQ\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n  </chapter>\n \n <chapter display_name=\"Strutture Dati\" url_name=\"strutture-dati-7ktob7iw\" start='2016-11-11T23:00:00.000Z' >\n   \n\n    <sequential display_name=\"Strutture Dati\" url_name=\"strutture-dati-lk16b5j6\"\n       start='2016-11-11T23:00:00.000Z' \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Strutture Dati - Step 1\" url_name=\"strutture-dati-ao3p6754\">\n        <html display_name=\"Strutture Dati - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Strutture dati</h1>\n<p>Matrici e vettori ci permettono di descrivere gli algoritmi in maniera\nsintetica ed espressiva, semplicemente facendo riferimento ai nomi delle\nvariabili, senza scendere nel dettaglio delle operazioni sui singoli\nelementi. Ad esempio, se abbiamo due vettori di 4 numeri <code>a</code> e <code>b</code>, la\nsomma elemento per elemento dei due vettori &#xE8; esprimibile sinteticamente\ncome:</p>\n<pre><code class=\"language-matlab\">a + b\n</code></pre>\n<p>La possibilit&#xE0; di utilizzare espressioni sintetiche per descrivere\noperazioni complesse significa alzare il livello di <strong>astrazione</strong> nel\nlinguaggio.</p>\n<p>Fino ad ora per&#xF2; abbiamo visto come lavorare con dati <strong>omogenei</strong>\nall&#x27;interno di vettori e matrici. Cosa significa questo? Significa che\nall&#x27;interno di un vettore possiamo rappresentare solo dati dello stesso\ntipo e distinguibili solo in termini di posizione all&#x27;interno del\nvettore.</p>\n<p>Ma se invece di una serie di coordinate volessimo esprimere i dati\nanagrafici di uno studente universitario, potremmo ancora utilizzare un\nvettore? La risposta &#xE8; no. Uno studente ha un <strong>nome</strong>, <strong>cognome</strong> e\n<strong>data di nascita</strong>. Mentre le prime due sono stringhe, la terza &#xE8;\ncomposta da tre informazioni numeriche: <strong>giorno</strong>, <strong>mese</strong> ed\n<strong>anno</strong>. Siamo quindi in presenza di informazioni <strong>eterogenee</strong>.</p>\n<p>Le variabili possono rappresentare strutture eterogenee (anche dette\n<strong>strutture dati</strong>) in cui le varie informazioni prendono il nome di\n<strong>campi</strong> della struttura eterogenea dei dati.</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Creazione\" url_name=\"creazione-vego9vcm\"\n      \n      graded=\"true\"\n       format=\"Lab\" \n    >\n     \n      \n      <vertical display_name=\"Creazione - Step 1\" url_name=\"creazione-4bqdjurj\">\n        <html display_name=\"Creazione - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Creazione</h1>\n<p>Per creare una variabile octave con informazioni relative ad uno\nstudente, dobbiamo <strong>costruire una struttura dati</strong>. Se volessi inserire\nl&#x27;anagrafica di quando ero studente io all&#x27;interno di una variabile <code>x</code>,\nla genererei cosi:</p>\n<pre><code class=\"language-matlab\">x.nome = &#x27;Vittorio&#x27;\nx.cognome = &#x27;Zaccaria&#x27;\nx.meseNascita = 7\nx.giornoNascita = 10\nx.annoNascita = ... % segreto :)\n</code></pre>\n<p>Dove con <code>x.nome = &#x27;Vittorio&#x27;</code> intendo dire che il campo <code>nome</code> della\nvariabile <code>x</code> deve essere uguale alla stringa <code>Vittorio</code>.</p>\n<p>Se interrogo octave sul valore complessivo della variabile <code>x</code> ottengo:</p>\n<pre><code class=\"language-matlab\">octave:7&#x3E; x\nx =\n\n  scalar structure containing the fields:\n\n    nome = Vittorio\n    cognome = Zaccaria\n    meseNascita =  7\n    giornoNascita =  10\n</code></pre>\n<p>In alternativa posso creare la variabile <code>x</code> in un solo assegnamento,\nutilizzando la funzione <code>struct</code> e specificando in maniera alternata i\ncampi e i loro valori:</p>\n<pre><code class=\"language-matlab\">x = struct(&#x27;nome&#x27;, &#x27;Vittorio&#x27;, &#x27;cognome&#x27;, &#x27;Zaccaria&#x27;, &#x27;meseNascita&#x27;, 7, giornoNascita, 10)\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Creazione - Step 2\" url_name=\"creazione-hh2ng2b3\">\n        <problem display_name=\"Creazione - Step 2\">\n            <text>\n                <p>Creare una variabile struttura dati <code>k</code> che contenga un campo\n<code>nomeSquadra</code> pari alla stringa <code>Milan</code> e un campo &#x27;scudetti&#x27; con il\nnumero degli scudetti vinti dal Milan.</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display></initial_display>\n                    <answer_display>k.nomeSquadra = &#39;Milan&#39;\nk.scudetti = 29</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoiIiwic29sdXRpb24iOiJrLm5vbWVTcXVhZHJhID0gJ01pbGFuJ1xuay5zY3VkZXR0aSA9IDI5IiwidmFsaWRhdGlvbiI6ImFzc2VydChrLm5vbWVTcXVhZHJhID09ICdNaWxhbicpXG5hc3NlcnQoay5zY3VkZXR0aSA-IDApIiwiY29udGV4dCI6IiIsImxhbmciOiJtYXRsYWIifQ\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Rimozione elementi\" url_name=\"rimozione-elementi-h65408hb\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Rimozione elementi - Step 1\" url_name=\"rimozione-elementi-m35hq2hh\">\n        <html display_name=\"Rimozione elementi - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Rimozione di un campo</h1>\n<p>Se volessimo rimuovere un campo da una struttura dati, utilizzeremmo la\nfunzione <code>rmfield</code> che ritorna una struttura dati in cui il campo &#xE8;\nstato cancellato:</p>\n<pre><code class=\"language-matlab\">octave:10&#x3E; y = rmfield(x, &#x27;nome&#x27;)\ny =\n\n  scalar structure containing the fields:\n\n    cognome = Zaccaria\n    meseNascita =  7\n    giornoNascita =  10\n\noctave:11&#x3E; x\nx =\n\n  scalar structure containing the fields:\n\n    nome = Vittorio\n    cognome = Zaccaria\n    meseNascita =  7\n    giornoNascita =  10\n\noctave:12&#x3E;\n</code></pre>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Scansione\" url_name=\"scansione-y63rucc7\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Scansione - Step 1\" url_name=\"scansione-kgh6v6w1\">\n        <html display_name=\"Scansione - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Scansione degli elementi di una struttura</h1>\n<p>Supponiamo che voglia stampare gli elementi della struttura; posso usare\nun ciclo che scansiona la struttura stessa scomponendo ciascuno dei\ncampi nel nome e valore, interpretando la struttura come una sequenza:</p>\n<pre><code class=\"language-matlab\">struttura.nome = &#x22;Mario&#x22;\nstruttura.cognome = &#x22;Rossi&#x22;\n\nfor [valore, campo] = struttura\n  disp([&#x27;valore del campo &#x27; campo &#x27;: &#x27; valore])\nend\n</code></pre>\n<p>darebbe in output:</p>\n<pre><code class=\"language-matlab\">valore del campo nome: Mario\nvalore del campo cognome: Rossi\n</code></pre>\n<p>La notazione:</p>\n<pre><code class=\"language-matlab\">[valore, campo] = struttura\n</code></pre>\n<p>&#xE8; anche chiamata <em>destructuring</em> poich&#xE8; scompone ciascun elemento in\n<code>valore</code> e <code>campo</code>.</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n   </sequential>\n\n  \n\n    <sequential display_name=\"Array di strutture\" url_name=\"array-di-strutture-s702e52i\"\n      \n      graded=\"false\"\n      \n    >\n     \n      \n      <vertical display_name=\"Array di strutture - Step 1\" url_name=\"array-di-strutture-o53gs7xp\">\n        <html display_name=\"Array di strutture - Step 1\">\n\n          <script type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/prism.min.js'/>\n          <script type='text/javascript'>\n            function onLoad () { Prism.highlightAll(); window.removeEventListener('load', onLoad); };\n            console.log(\"Adding event listener\");\n            window.addEventListener('load', onLoad, false);\n          </script>\n          <link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.4.1/themes/prism.min.css\" rel=\"stylesheet\" />\n\n\n         <h1>Vettori di strutture</h1>\n<p>Abbiamo visto che le matrici e i vettori Octave possono mantenere al\nproprio interno solo dati omogenei (ovvero dello stesso tipo). Ad\nesempio, un vettore <code>v</code> definito in questo modo:</p>\n<pre><code class=\"language-matlab\">octave:1&#x3E; v(1) = 3\nv =  3\noctave:2&#x3E; v(2) = 4\nv =\n\n   3   4\n</code></pre>\n<p>potr&#xE0; contenere solo numeri e niente altro.</p>\n<h2>Non solo numeri</h2>\n<p>Riprendiamo la struttura dati contenente i dati di uno studente:</p>\n<pre><code class=\"language-matlab\">x.nome = &#x27;Vittorio&#x27;\nx.cognome = &#x27;Zaccaria&#x27;\nx.meseNascita = 7\nx.giornoNascita = 10\n</code></pre>\n<p>e magari definiamone anche un&#x27;altra, di un altro studente ovviamente:</p>\n<pre><code class=\"language-matlab\">y.nome = &#x27;Anna&#x27;\ny.cognome = &#x27;Rossi&#x27;\ny.meseNascita = 8\ny.giornoNascita = 2\n</code></pre>\n<p>Cosa succede con il seguente assegnamento?</p>\n<pre><code class=\"language-matlab\">studenti(1) = x\nstudenti(2) = y\n</code></pre>\n<p>Octave ci risponder&#xE0; che ha creato un vettore di strutture dati di due\nelementi:</p>\n<pre><code class=\"language-matlab\">studenti =\n\n  1x2 struct array containing the fields:\n\n    nome\n    cognome\n    meseNascita\n    giornoNascita\n</code></pre>\n<p>I due elementi dell&#x27;array <code>studenti</code> sono una copia delle strutture dati\nstudente <code>x</code> e <code>y</code>.</p>\n<h2>Accesso ai dati dell&#x27;array</h2>\n<p>Se volessimo scrivere un programma che stampi i cognomi di tutti gli\nstudenti contenuti nell&#x27;array appena creato, potremmo fare cosi:</p>\n<pre><code class=\"language-matlab\">for s = studenti\n  disp(s.cognome)\nend\n</code></pre>\n<p>oppure, senza un ciclo, sfruttando le funzioni anonime:</p>\n<pre><code class=\"language-matlab\">arrayfun(@(x)disp(x.cognome), studenti)\n</code></pre>\n<p>ottenendo:</p>\n<pre><code class=\"language-matlab\">Zaccaria\nRossi\n</code></pre>\n<h2>Proiezione di un array di strutture su un campo</h2>\n<p>Supponiamo ora di creare un array <code>n</code> solo con il mese di nascita degli\nstudenti:</p>\n<pre><code class=\"language-matlab\">n = [studenti.meseNascita]\n</code></pre>\n<p>Di fatto, <code>[studenti.meseNascita]</code> &#xE8; un modo veloce per dire, &#x22;dammi un\narray dove ogni elemento &#xE8; costituito dal valore del campo <code>meseNascita</code>\nnell&#x27;elemento corrispondente in <code>studenti</code>&#x22;.</p>\n<p>Ovviamente <code>[studenti.meseNascita]</code> e <code>studenti</code> hanno le stesse\ndimensioni.</p>\n<p>Dato l&#x27;array di strutture dati <code>studenti</code>, completare il programma di\nseguito in modo che la variabile <code>n</code> assuma il valore del numero di</p>\n\n        </html>\n      </vertical>\n      \n\n      \n      \n     \n      \n\n      \n      <vertical display_name=\"Array di strutture - Step 2\" url_name=\"array-di-strutture-fbtw4dth\">\n        <problem display_name=\"Array di strutture - Step 2\">\n            <text>\n                <p>studenti con <code>meseNascita</code> pari a 4 (senza usare cicli):</p>\n\n            </text>\n\n            <coderesponse queuename=\"octave\">\n                <textbox rows=\"10\" cols=\"80\" mode=\"matlab\" tabsize=\"4\" />\n                <codeparam>\n                    <initial_display>studenti(1) = struct(&#39;nome&#39;, &#39;Vittorio&#39;, &#39;cognome&#39;, &#39;Zaccaria&#39;, &#39;meseNascita&#39;, 7)\nstudenti(2) = struct(&#39;nome&#39;, &#39;Marco&#39;, &#39;cognome&#39;, &#39;Rossi&#39;, &#39;meseNascita&#39;, 4)\nstudenti(3) = struct(&#39;nome&#39;, &#39;Giovanna&#39;, &#39;cognome&#39;, &#39;Bianchi&#39;, &#39;meseNascita&#39;, 9)\nstudenti(4) = struct(&#39;nome&#39;, &#39;Pippo&#39;, &#39;cognome&#39;, &#39;Rossi&#39;, &#39;meseNascita&#39;, 4)</initial_display>\n                    <answer_display>studenti(1) = struct(&#39;nome&#39;, &#39;Vittorio&#39;, &#39;cognome&#39;, &#39;Zaccaria&#39;, &#39;meseNascita&#39;, 7)\nstudenti(2) = struct(&#39;nome&#39;, &#39;Marco&#39;, &#39;cognome&#39;, &#39;Rossi&#39;, &#39;meseNascita&#39;, 4)\nstudenti(3) = struct(&#39;nome&#39;, &#39;Giovanna&#39;, &#39;cognome&#39;, &#39;Bianchi&#39;, &#39;meseNascita&#39;, 9)\nstudenti(4) = struct(&#39;nome&#39;, &#39;Pippo&#39;, &#39;cognome&#39;, &#39;Rossi&#39;, &#39;meseNascita&#39;, 4)\n\nn = sum([studenti.meseNascita] == 4)</answer_display>\n                    <grader_payload>\n                      {\"payload\":\"eyJiYXNlIjoic3R1ZGVudGkoMSkgPSBzdHJ1Y3QoJ25vbWUnLCAnVml0dG9yaW8nLCAnY29nbm9tZScsICdaYWNjYXJpYScsICdtZXNlTmFzY2l0YScsIDcpXG5zdHVkZW50aSgyKSA9IHN0cnVjdCgnbm9tZScsICdNYXJjbycsICdjb2dub21lJywgJ1Jvc3NpJywgJ21lc2VOYXNjaXRhJywgNClcbnN0dWRlbnRpKDMpID0gc3RydWN0KCdub21lJywgJ0dpb3Zhbm5hJywgJ2NvZ25vbWUnLCAnQmlhbmNoaScsICdtZXNlTmFzY2l0YScsIDkpXG5zdHVkZW50aSg0KSA9IHN0cnVjdCgnbm9tZScsICdQaXBwbycsICdjb2dub21lJywgJ1Jvc3NpJywgJ21lc2VOYXNjaXRhJywgNCkiLCJzb2x1dGlvbiI6InN0dWRlbnRpKDEpID0gc3RydWN0KCdub21lJywgJ1ZpdHRvcmlvJywgJ2NvZ25vbWUnLCAnWmFjY2FyaWEnLCAnbWVzZU5hc2NpdGEnLCA3KVxuc3R1ZGVudGkoMikgPSBzdHJ1Y3QoJ25vbWUnLCAnTWFyY28nLCAnY29nbm9tZScsICdSb3NzaScsICdtZXNlTmFzY2l0YScsIDQpXG5zdHVkZW50aSgzKSA9IHN0cnVjdCgnbm9tZScsICdHaW92YW5uYScsICdjb2dub21lJywgJ0JpYW5jaGknLCAnbWVzZU5hc2NpdGEnLCA5KVxuc3R1ZGVudGkoNCkgPSBzdHJ1Y3QoJ25vbWUnLCAnUGlwcG8nLCAnY29nbm9tZScsICdSb3NzaScsICdtZXNlTmFzY2l0YScsIDQpXG5cbm4gPSBzdW0oW3N0dWRlbnRpLm1lc2VOYXNjaXRhXSA9PSA0KSIsInZhbGlkYXRpb24iOiJhc3NlcnQobj09MikiLCJjb250ZXh0IjoiIiwibGFuZyI6Im1hdGxhYiJ9\"}\n                    </grader_payload>\n                </codeparam>\n\n            </coderesponse>\n        </problem>\n      </vertical>\n      \n      \n     \n   </sequential>\n\n  \n  </chapter>\n \n</course>\n",
        "/about/overview.html": "<section class=\"about\">\nQuesto corso introduce gli studenti ai rudimenti di programmazione\nOctave/Matlab.\n\n</section>\n\n<section class=\"prerequisites\">\n\n\n</section>\n\n<section class=\"course-staff\">\n  <h2>Course Staff</h2>\n\n  <article class=\"teacher\">\n    <div class=\"teacher-image\">\n      <img src=\"https://dl.dropboxusercontent.com/u/5867765/avatars/avatar-vz.jpg\" align=\"left\" style=\"margin:0 20 px 0\">\n    </div>\n\n    <h3>Vittorio Zaccaria</h3>\n    Laurea in Ingegneria Informatica (1998) e Dottorato in Ingegneria Informatica (2002)\n\n  </article>\n  \n</section>\n\n<section class=\"faq\">\n  <section class=\"responses\">\n    <h2>Frequently Asked Questions</h2>\n    \n    <article class=\"response\">\n      <h3>Possono partecipare tutti al corso?</h3>\n      Si, tutti gli iscritti a Informatica B possono partecipare\n\n    </article>\n    \n  </section>\n</section>\n",
        "/about/short_description.html": "Benvenuti! Questo corso online è da intendersi come\nsupporto alla parte Matlab/Octave del corso di Informatica B che\ninsegno il Politecnico di Milano. Per ulteriori informazioni, fare\nriferimento alla pagina del corso.\n\n",
        "/policies/2016-fall/grading_policy.json": "{\n    \"GRADE_CUTOFFS\": {\n        \"pass\": 0.6\n    },\n    \"GRADER\": [\n        {\n            \"min_count\": 2,\n            \"weight\": 1,\n            \"type\": \"Homework\",\n            \"drop_count\": 0,\n            \"short_label\": \"HW\"\n        },\n        {\n            \"min_count\": 3,\n            \"weight\": 1,\n            \"type\": \"Lab\",\n            \"drop_count\": 0,\n            \"short_label\": \"Lab\"\n        }\n    ]\n}"
    }
}
